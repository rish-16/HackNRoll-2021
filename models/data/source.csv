,text,start,duration,end
0,The following content is provided under a Creative,0.79,2.4,3.19
1,Commons license.,3.19,1.54,4.73
2,Your support will help MIT OpenCourseWare,4.73,2.3,7.03
3,continue to offer high quality educational resources for free.,7.03,4.36,11.39
4,To make a donation or view additional materials,11.39,2.6,13.99
5,"from hundreds of MIT courses, visit MIT OpenCourseWare",13.99,3.89,17.88
6,at ocw.mit.edu.,17.88,0.96,18.84
7,PROFESSOR: All right everyone.,30.42,1.25,31.67
8,Let's get started.,31.67,2.28,33.95
9,"So today's lecture and Wednesday's lecture,",33.95,3.99,37.940000000000005
10,we're going to talk about this thing called,37.94,2.01,39.949999999999996
11,object oriented programming.,39.95,1.48,41.43
12,"And if you haven't programmed before,",41.43,1.79,43.22
13,I think this is a fairly tough concept to grasp.,43.22,3.33,46.55
14,"But hopefully with many, many examples",46.55,3.18,49.73
15,"and just by looking at the code available from lectures,",49.73,5.79,55.519999999999996
16,you'll hopefully get the hang of it quickly.,55.52,2.69,58.21
17,So let's talk a little bit about objects.,58.21,4.56,62.77
18,And we've seen objects in Python so far.,62.77,3.18,65.95
19,Objects are basically data in Python.,65.95,3.21,69.16
20,So every object that we've seen has a certain type.,69.16,3.11,72.27
21,"OK, that we know.",72.27,1.915,74.185
22,"Behind the scenes, though, every object",74.185,1.965,76.15
23,has these two additional things.,76.15,2.38,78.53
24,One is some data representation.,78.53,1.75,80.28
25,So how Python represents the object just behind the scenes,80.28,5.77,86.05
26,and what are different ways that you,86.05,1.53,87.58
27,can interact with the object.,87.58,3.42,91.0
28,"So for example, every one of these is a different object.",91.0,4.37,95.37
29,"For example, this is the number 1,234.",95.37,3.6,98.97
30,It's a specific object that is of type integer.,98.97,3.15,102.12
31,The number 5 is a different object that's of type integer,102.12,3.82,105.94
32,and so on.,105.94,0.98,106.92
33,We've seen floats.,106.92,0.96,107.88
34,We've seen strings.,107.88,1.11,108.99
35,We've seen lists.,108.99,1.74,110.72999999999999
36,Lists and dictionaries are more complicated objects.,110.73,3.85,114.58
37,Object types.,114.58,0.7,115.28
38,Sorry.,115.28,1.31,116.59
39,"But every object has a type, some sort of way",116.59,2.67,119.26
40,that it's represented in Python and some ways,119.26,3.909,123.16900000000001
41,that we can interact with them.,123.169,1.291,124.46
42,OK.,127.02,0.5,127.52
43,So the idea behind object oriented programming,127.52,2.67,130.19
44,"is, first of all, everything in Python is an object.",130.19,2.91,133.1
45,We've said that before and in this lecture,133.1,2.56,135.66
46,I think we'll really get at what that means.,135.66,2.03,137.69
47,"So we've seen strings, integers, dictionaries, lists.",137.69,3.63,141.32
48,Those are all objects.,141.32,1.38,142.7
49,"When we did functions, we saw that we",142.7,1.8,144.5
50,could pass as a parameter another function.,144.5,3.12,147.62
51,So functions were also objects in Python.,147.62,2.12,149.74
52,So literally everything in Python is an object.,149.74,3.779,153.519
53,So what are the kinds of things we can do with objects?,153.519,2.291,155.81
54,"Well, once you have a type, you can create a new object",155.81,3.42,159.23
55,that is of some type.,159.23,1.314,160.54399999999998
56,And you can create as many objects,160.544,1.416,161.96
57,"as you'd like of that particular type, right?",161.96,2.91,164.87
58,An integer 5 and integer 7.,164.87,2.07,166.94
59,Those all work in a program.,166.94,3.21,170.15
60,"Once you've created these new objects,",170.15,2.49,172.64000000000001
61,you can manipulate them.,172.64,1.65,174.29
62,"So for a list, for example, you can append an item",174.29,2.28,176.57
63,"to the end of the list, you can delete an item,",176.57,2.85,179.42
64,"remove it, concatenate two lists together.",179.42,4.56,183.98
65,So that's ways that you can interact with objects.,183.98,3.041,187.021
66,And the last thing you can do is you can destroy them.,187.021,2.249,189.26999999999998
67,"So and with lists, we saw explicitly",189.27,1.73,191.0
68,"that you can delete elements from a list,",191.0,2.976,193.976
69,or you can just forget about them,193.976,1.374,195.35
70,"by reassigning a variable to another value,",195.35,4.03,199.38
71,"and then at some point, Python will",199.38,2.54,201.92
72,collect all of these dead objects and reclaim the memory.,201.92,2.77,204.69
73,So let's continue exploring what objects are.,207.81,3.98,211.79
74,So let's say I have these two separate objects.,211.79,2.53,214.32
75,One is a blue car.,214.32,1.13,215.45
76,One is a pink car.,215.45,1.5,216.95
77,So objects are really data abstractions.,216.95,2.79,219.73999999999998
78,So these two cars can be created by the same blueprint.,219.74,3.31,223.05
79,OK?,223.05,0.62,223.67000000000002
80,This is a blueprint for a car and if an object is a data,223.67,3.73,227.39999999999998
81,"abstraction, there's two things that this abstraction",227.4,2.24,229.64000000000001
82,is going to capture.,229.64,1.3,230.94
83,The first is some sort of representation.,230.94,3.26,234.2
84,"What is going to represent the car, what data represents a car",234.2,3.11,237.31
85,object?,237.31,1.23,238.54
86,And the second is what are ways that we,238.54,1.86,240.4
87,can interact with the object?,240.4,2.68,243.08
88,"So if we think about a car blueprint,",243.08,2.93,246.01000000000002
89,some general representation for a car,246.01,2.37,248.38
90,"could be the number of wheels it has, the number of doors",248.38,2.52,250.9
91,"it has, maybe its length, maybe its height,",250.9,2.55,253.45000000000002
92,so this is all part of what data represents the car.,253.45,6.129,259.579
93,OK?,259.579,1.57,261.149
94,The interface for the car is what,261.149,1.681,262.83
95,are ways that you can interact with it.,262.83,1.75,264.58
96,"So for example, you could paint a car, right?",264.58,3.535,268.115
97,So you could change its color.,268.115,2.605,270.72
98,You could have the car make a noise,270.72,3.29,274.01000000000005
99,and different cars might make different noises.,274.01,2.33,276.34
100,"Or you can drive the car, right?",276.34,1.72,278.06
101,So these are all ways that you can interact with the car.,278.06,2.55,280.61
102,Whereas the representation are what makes up the car.,280.61,2.52,283.13
103,What data abstractions make up the car.,283.13,5.46,288.59
104,Let's bring it a little closer to home by looking at a list.,288.59,5.04,293.63
105,"So we have this data type of list, right?",293.63,3.36,296.99
106,We've worked with lists before.,296.99,3.78,300.77
107,"The list with elements 1, 2, 3, and 4 is a very specific object",300.77,4.26,305.03
108,that is of type list.,305.03,2.7,307.72999999999996
109,"Again, we think about it in terms of two things.",307.73,2.2,309.93
110,One is what is the data representation of the list?,309.93,3.57,313.5
111,So behind the scenes how does Python see lists?,313.5,2.837,316.337
112,"And the second is, how do you interact with lists?",316.337,2.083,318.42
113,So what are ways that you can manipulate a list,318.42,1.958,320.37800000000004
114,object once it's created?,320.378,2.882,323.26
115,"So behind the scenes you have a list, L,",323.26,3.1,326.36
116,which is going to be made up of essentially two things.,326.36,2.67,329.03000000000003
117,One is going to be the value at specific index.,329.03,5.25,334.28
118,OK?,334.28,0.69,334.96999999999997
119,"So at index 0, it has the value 1, right,",334.97,2.28,337.25
120,because it's the first element in the list.,337.25,2.52,339.77
121,And the second thing that represents a list,339.77,3.24,343.01
122,"is going to be this second part, which is a pointer.",343.01,4.98,347.99
123,And internally this pointer is going,347.99,1.7,349.69
124,to tell Python where is the memory,349.69,2.73,352.42
125,location in the computer where you can access the element,352.42,5.19,357.61
126,index 1.,357.61,1.32,358.93
127,"So it's just essentially going to be a chain,",358.93,3.39,362.32
128,going from one index to the other.,362.32,2.02,364.34
129,"And at the next memory location you have the value at index 1,",364.34,4.165,368.505
130,and then you have another pointer,368.505,1.375,369.88
131,that takes you to the location in memory,369.88,1.74,371.62
132,where the index 2 is located.,371.62,2.82,374.44
133,And in index 2 you have the value and then,374.44,1.89,376.33
134,"the next pointer, and so on and so on.",376.33,3.16,379.49
135,So this is how Python internally represents a list.,379.49,4.26,383.75
136,OK?,383.75,1.81,385.56
137,"How you manipulate lists, we've done this a lot, right?",385.56,2.78,388.34
138,"You can index into a list, you can add two lists together,",388.34,6.07,394.40999999999997
139,"you can get the length, you can append to the end of a list,",394.41,2.75,397.16
140,"you can sort a list, reverse a list, and so many other things,",397.16,2.7,399.86
141,right?,399.86,0.84,400.7
142,So these are all ways that you can,400.7,1.416,402.116
143,interact with the list object as soon as you've created it.,402.116,3.114,405.22999999999996
144,"So notice both of these, the internal representation",405.23,3.36,408.59000000000003
145,"and how you manipulate lists, you",408.59,1.68,410.27
146,don't actually know internally how,410.27,3.33,413.59999999999997
147,"these are represented, right?",413.6,1.47,415.07000000000005
148,How did whoever wrote the list class,415.07,2.64,417.71
149,decide to implement a sort.,417.71,1.41,419.12
150,We don't know.,419.12,1.32,420.44
151,You also weren't aware of how these lists were represented,420.44,2.94,423.38
152,internally.,423.38,0.51,423.89
153,And you didn't need to know that.,423.89,1.38,425.27
154,That's the beauty of object oriented programming,425.27,3.03,428.29999999999995
155,and having these data abstractions.,428.3,2.84,431.14
156,The representations are private of these objects,431.14,2.73,433.87
157,"and they are only known by what you can find out how it's done,",433.87,4.08,437.95
158,but they only should be known by whoever implemented them.,437.95,3.49,441.44
159,"You, as someone who uses this class,",441.44,1.7,443.14
160,doesn't really need to know how a list is represented,443.14,2.4,445.53999999999996
161,internally in order to be able to use it,445.54,2.35,447.89000000000004
162,and to write cool programs with them.,447.89,3.09,450.97999999999996
163,OK?,450.98,1.45,452.43
164,So just find a motivation here before we,452.43,3.5,455.93
165,start writing our own types of objects,455.93,2.67,458.6
166,is the advantages of object oriented programming,458.6,2.73,461.33000000000004
167,is really that you're able to bundle,461.33,2.94,464.27
168,"this data, bundle some internal representation,",464.27,3.35,467.62
169,and some ways to interact with a program into these packages.,467.62,4.14,471.76
170,"And with these packages, you can create objects",471.76,3.544,475.304
171,and all of these objects are going,475.304,1.416,476.71999999999997
172,to behave the exact same way.,476.72,1.208,477.92800000000005
173,They're going to have the same internal representation,477.928,2.262,480.19
174,and the same way that you can interact with them.,480.19,3.07,483.26
175,"And ultimately, this is going to contribute to the decomposition",483.26,4.89,488.15
176,and abstraction ideas that we talked about when,488.15,3.69,491.84
177,we talked about functions.,491.84,1.387,493.227
178,And that means that you're going to be,493.227,1.583,494.81
179,able to write code that's a lot more reusable and a lot easier,494.81,4.47,499.28000000000003
180,to read in the future.,499.28,1.53,500.80999999999995
181,OK.,500.81,2.49,503.3
182,"So just like when we talked about functions,",503.3,2.85,506.15000000000003
183,we're going to sort of separate the code,506.15,2.1,508.25
184,that we talk about today into code where you implement a data,508.25,6.21,514.46
185,type and code where you use an object that you create.,514.46,5.849,520.3090000000001
186,OK?,520.309,0.541,520.85
187,"So remember when we talked about functions,",520.85,1.791,522.6410000000001
188,"you were thinking about it in terms of writing a function,",522.641,2.986,525.627
189,so you had to worry about the details of how,525.627,1.833,527.4599999999999
190,you implement a function.,527.46,1.64,529.1
191,And then you had to worry about just,529.1,1.65,530.75
192,"how to use a function, right?",530.75,1.39,532.14
193,So it's sort of the same idea today.,532.14,3.49,535.63
194,So when you're thinking about implementing your own data,535.63,5.18,540.81
195,"type, you do that with this thing called a class.",540.81,3.94,544.75
196,"And when you create a class, you're",548.5,1.95,550.45
197,basically going to figure out what name you,550.45,1.82,552.2700000000001
198,want to give your class and you're,552.27,1.63,553.9
199,going to find some attributes.,553.9,2.156,556.0559999999999
200,And attributes are going to be the data,556.056,1.624,557.6800000000001
201,representation and ways that you can interact with your object.,557.68,4.184,561.8639999999999
202,"So you, as the programmer of this class,",561.864,1.666,563.5300000000001
203,are going to decide how you want people,563.53,2.07,565.6
204,to interact with the object and what data this object,565.6,4.18,569.78
205,is going to have.,569.78,3.08,572.86
206,"So for example, someone wrote code",572.86,2.42,575.28
207,"that implements a list class, right,",575.28,2.1,577.38
208,and we don't actually know how that was done.,577.38,2.49,579.87
209,But we can find out.,579.87,3.31,583.18
210,So creating the class is implementing the class,583.18,4.53,587.7099999999999
211,and figuring out data representation and ways,587.71,1.98,589.69
212,to interact with the class.,589.69,2.58,592.2700000000001
213,"Once that's done, you can then use your class.",592.27,3.3,595.5699999999999
214,And you use the class by creating,595.57,2.34,597.9100000000001
215,new instances of the class.,597.91,4.254,602.164
216,"So when you create a new instance,",602.164,1.416,603.58
217,you essentially create a new object,603.58,2.13,605.71
218,"that has the type, the name of your class.",605.71,3.72,609.4300000000001
219,And you can create as many objects as you'd like.,609.43,2.13,611.56
220,You can do all the operations that you've,611.56,2.82,614.38
221,defined on the class.,614.38,2.28,616.66
222,"So for example, someone wrote the code",616.66,1.995,618.655
223,to implement list class and then you can just,618.655,1.875,620.53
224,use the list class like this.,620.53,1.39,621.92
225,"You can create a new list, you can get the length pf the list,",621.92,3.41,625.3299999999999
226,"you can append to the end of the list, and so on and so on.",625.33,2.99,628.32
227,"So let's start defining our own types, OK?",633.55,4.29,637.8399999999999
228,"So now you're going to define classes,",637.84,1.962,639.802
229,you're going to write classes which,639.802,1.458,641.26
230,are going to define your own types of objects.,641.26,4.4,645.66
231,So for today's lecture we're going,645.66,2.09,647.75
232,to look at code that's going to be,647.75,2.49,650.24
233,in the context of a coordinate object.,650.24,2.97,653.21
234,And a coordinate object is essentially,653.21,1.65,654.86
235,going to be an object that's going to define,654.86,8.12,662.98
236,a point in an xy plane.,662.98,4.42,667.4
237,"So x, y is going to be a coordinate in a 2D plane.",667.4,4.652,672.052
238,So we're going to write code that's,672.052,1.458,673.51
239,going to allow us to define that kind of object.,673.51,2.375,675.885
240,So the way we do that is we have to define a class.,678.83,3.974,682.8040000000001
241,"So we have to tell Python, hey, I'm defining my own object",682.804,2.416,685.22
242,type.,685.22,1.05,686.27
243,So you do that with this class key word.,686.27,1.8,688.0699999999999
244,"So you say class, then you say the name of your type.",688.07,3.81,691.88
245,"In this case, we're creating a type called coordinate.",691.88,2.58,694.46
246,"Just like we had type list, type string, and so on.",694.46,2.71,697.1700000000001
247,This is going to be a type called coordinate.,697.17,3.45,700.62
248,"And then in parentheses here, you",700.62,1.5,702.12
249,put what the parents of the class are.,702.12,2.37,704.49
250,"For today's lecture, the parent of the classes",704.49,4.1,708.59
251,"are going to be this thing called object,",708.59,1.89,710.48
252,and object is the very basic type in Python.,710.48,5.7,716.1800000000001
253,It is the most basic type in Python.,716.18,2.07,718.25
254,And it implements things like being able to assign variables.,718.25,3.96,722.21
255,"So really, really basic operations",722.21,1.77,723.98
256,that you can do with objects.,723.98,2.76,726.74
257,So your coordinate is therefore going,726.74,1.59,728.33
258,to be an object in Python.,728.33,1.615,729.945
259,All right.,732.63,0.5,733.13
260,So we've told Python we wanted to define an object.,733.13,3.45,736.58
261,So inside the class definition we're going to put attributes.,736.58,2.89,739.47
262,So what are attributes?,739.47,2.35,741.82
263,Attributes are going to be data and procedures that,741.82,2.79,744.61
264,"belong to the class, OK?",744.61,2.39,747.0
265,Data are going to be the data representations and procedures,747.0,2.95,749.95
266,are going to be ways that we can interact with the object.,749.95,3.68,753.63
267,The fact that they belong to the class,753.63,2.28,755.91
268,means that the data and the procedures that we write,755.91,2.76,758.67
269,are only going to work with an object of this type.,758.67,2.82,761.49
270,OK.,761.49,0.78,762.27
271,If you try to use any of the data or the procedures,762.27,2.832,765.102
272,"with an object of a different type,",765.102,1.458,766.56
273,you're going to get an error because these data,766.56,4.47,771.03
274,and these attributes will belong to this particular class.,771.03,5.85,776.88
275,"So the data attributes is, what is the object, right?",779.41,5.4,784.81
276,What is the data that makes up the object?,784.81,2.68,787.4899999999999
277,"So for our coordinate example, it's",787.49,1.73,789.22
278,going to be the x and y values for coordinate.,789.22,3.204,792.424
279,"We can decide that can be ints, we",792.424,1.416,793.84
280,"can decide that we can let them be floats,",793.84,2.07,795.9100000000001
281,but it's going to have one value for the x-coordinate,795.91,3.09,799.0
282,and one value for the y-coordinate.,799.0,1.757,800.757
283,So those are data attributes.,803.96,1.72,805.6800000000001
284,And procedure attributes are better known as methods.,805.68,3.93,809.6099999999999
285,And you can think of a method as a function.,809.61,2.479,812.089
286,Except that it's a function that only,812.089,1.541,813.6300000000001
287,works with this particular type of object.,813.63,3.7,817.33
288,"So with a coordinate object, in this case.",817.33,3.58,820.9100000000001
289,So the methods are going to define how you,820.91,1.75,822.66
290,can interact with the object.,822.66,1.44,824.1
291,"So in a list, for example, we've said",824.1,1.775,825.875
292,"that you can append an item to the end of the list,",825.875,2.125,828.0
293,"we can sort a list, things like that.",828.0,2.52,830.52
294,"So when you're defining methods, you're",830.52,2.07,832.59
295,defining ways that people can interact with your object.,832.59,2.53,835.12
296,"So for example, for a coordinate object,",835.12,1.68,836.8
297,we can say that we can take the distance between two,836.8,2.39,839.1899999999999
298,coordinate points.,839.19,1.46,840.6500000000001
299,OK?,840.65,0.73,841.38
300,And that's going to be a way that you can interact,841.38,2.083,843.463
301,with two coordinate points.,843.463,2.897,846.36
302,"And just to be clear, these are going",846.36,3.27,849.63
303,"to belong to this class, which means",849.63,1.5,851.13
304,"that if you try to use this distance method on two lists,",851.13,3.18,854.31
305,"for example, you're going to get an error.",854.31,1.83,856.14
306,Because this distance method was only defined to work with two,856.14,3.12,859.26
307,coordinate type objects.,859.26,1.271,860.531
308,"All right, so let's carry on and continue",863.12,3.56,866.68
309,implementing our class.,866.68,2.07,868.75
310,"So we've written this first line so far,",868.75,2.55,871.3
311,class coordinate object.,871.3,1.34,872.64
312,So now let's define attributes.,872.64,3.1,875.74
313,First thing we're going to define are data attributes.,875.74,3.9,879.64
314,"Generally you define data attributes inside this init,",879.64,5.08,884.72
315,"and this is underscore, underscore, init, underscore,",884.72,2.48,887.2
316,"underscore, and it's a special method or function in a class.",887.2,5.31,892.51
317,"And the special method tells Python,",892.51,3.487,895.997
318,"when you implement the special method,",895.997,1.583,897.5799999999999
319,"it tells Python when you first create an object of this type,",897.58,3.36,900.94
320,call this method or call this function.,900.94,2.07,903.0100000000001
321,So how do we do that?,906.47,1.61,908.08
322,So let's implement it.,908.08,1.68,909.76
323,So we say df because it's just a function.,909.76,4.53,914.29
324,"The name is the special name, init.",914.29,3.3,917.5899999999999
325,"And we give it some parameters, right,",917.59,1.8,919.39
326,just like any other function.,919.39,3.29,922.68
327,"These last two parameters are x and y,",922.68,3.57,926.25
328,which are going to represent how you create a coordinate object.,926.25,5.09,931.34
329,So you give it a value for the x-coordinate,931.34,1.96,933.3000000000001
330,and you give it a value for the y-coordinate.,933.3,3.02,936.3199999999999
331,"The self, however, is a little bit trickier.",936.32,3.23,939.5500000000001
332,So the self is going to be a parameter when,939.55,2.54,942.0899999999999
333,you define this class that represents,942.09,2.79,944.88
334,a particular instance of the class.,944.88,4.95,949.83
335,So we're defining this coordinate object,949.83,2.67,952.5
336,"in sort of a general way, right?",952.5,2.04,954.54
337,We don't have a specific instance,954.54,2.13,956.67
338,yet because we haven't created an object yet.,956.67,3.18,959.8499999999999
339,But this self is going to be sort,959.85,2.16,962.01
340,of a placeholder for any sort of instance,962.01,2.82,964.83
341,when you create the object.,964.83,2.98,967.8100000000001
342,"So in the definition of the class,",967.81,2.51,970.3199999999999
343,whenever you want to refer to attributes,970.32,1.95,972.2700000000001
344,"that belong to an instance, you have to use self dot.",972.27,5.26,977.53
345,So this dot notation.,977.53,1.8,979.3299999999999
346,And the dot is going to say look for a data attribute,979.33,6.9,986.23
347,x that belongs to this class.,986.23,2.19,988.4200000000001
348,"So for methods that belong to the class,",991.24,2.81,994.05
349,the first parameter is always going to be self.,994.05,3.264,997.314
350,"It can be named anything you want,",997.314,1.416,998.73
351,but really by convention it's always named self.,998.73,3.06,1001.79
352,So try to stick to that.,1001.79,2.49,1004.28
353,And then any other parameters beyond it,1004.28,1.89,1006.17
354,are going to be just parameters as you,1006.17,1.74,1007.91
355,would put in a normal function.,1007.91,3.28,1011.1899999999999
356,OK.,1011.19,0.681,1011.8710000000001
357,"In this particular case, we're going",1011.871,1.499,1013.37
358,to choose to initialize a coordinate object,1013.37,2.97,1016.34
359,"by two values, one for the x and one for the y.",1016.34,4.47,1020.8100000000001
360,"And inside this init method, we're",1020.81,2.88,1023.6899999999999
361,going to have two assignments.,1023.69,4.149,1027.839
362,"The first one says, the x data attribute",1027.839,3.74,1031.579
363,of a coordinate object.,1031.579,1.411,1032.99
364,I'm going to assign it to whatever was passed in.,1032.99,4.599,1037.589
365,And the y data attribute for a particular object,1037.589,3.02,1040.609
366,is going to be assigned whatever y was passed in.,1040.609,2.911,1043.52
367,Questions so far about how to write this init?,1050.42,3.73,1054.15
368,"Yeah, question.",1054.15,0.85,1055.0
369,AUDIENCE: [INAUDIBLE],1055.0,0.97,1055.97
370,PROFESSOR: How do you make sure that x and y,1060.597,1.833,1062.43
371,are inits or floats?,1062.43,1.58,1064.01
372,So this is something that you could,1064.01,1.69,1065.7
373,"write in the specifications, so the docstring",1065.7,2.67,1068.3700000000001
374,with the triple quotes.,1068.37,1.2,1069.57
375,So whoever uses the class would then,1069.57,3.33,1072.8999999999999
376,"know that if they do something outside the specification,",1072.9,3.03,1075.93
377,the code might not work as expected.,1075.93,2.13,1078.0600000000002
378,Or you could put in a cert statement,1078.06,2.28,1080.34
379,inside the definition of the init just,1080.34,3.54,1083.8799999999999
380,to sort of force that.,1083.88,2.65,1086.5300000000002
381,Force that to be true.,1086.53,1.94,1088.47
382,Great question.,1088.47,0.725,1089.195
383,"Yeah, question.",1089.195,0.625,1089.82
384,AUDIENCE: [INAUDIBLE],1089.82,0.94,1090.76
385,"PROFESSOR: Does the x, does this self x and this x",1094.52,2.319,1096.839
386,have to be the same name.,1096.839,1.041,1097.8799999999999
387,The answer is no.,1097.88,1.83,1099.71
388,And we're going to see in class exercise,1099.71,2.55,1102.26
389,that you can have it be different.,1102.26,1.9,1104.16
390,OK.,1107.03,1.02,1108.05
391,Great.,1108.05,0.69,1108.74
392,So this defines the way that we create an object.,1108.74,5.52,1114.26
393,So now we have sort of a nice class.,1114.26,4.86,1119.12
394,"It's very simple, but we can start actually",1119.12,2.37,1121.4899999999998
395,creating coordinate objects.,1121.49,2.407,1123.897
396,"So when you create coordinate objects,",1123.897,1.583,1125.48
397,you're creating instances of the class.,1125.48,3.45,1128.93
398,"So this line here, C is equal to coordinate 3,4,",1128.93,3.51,1132.44
399,is going to call the init method.,1132.44,2.8,1135.24
400,It's going to call the init method with x is equal to 3,1135.24,2.94,1138.18
401,and y is equal to 4.,1138.18,1.2,1139.38
402,"I'm just going to go over here and I wrote this previously,",1141.94,5.25,1147.19
403,"because notice when we're creating an object here,",1147.19,6.79,1153.98
404,we're only giving it two parameters.,1153.98,2.91,1156.89
405,"But in the init method, we have actually three parameters,",1156.89,3.3,1160.19
406,right?,1160.19,0.87,1161.06
407,"We have these three parameters here,",1161.06,1.834,1162.894
408,"but when we're creating an object,",1162.894,1.416,1164.31
409,we only give it two parameters.,1164.31,1.64,1165.95
410,"And that's OK because implicitly, Python",1165.95,2.65,1168.6000000000001
411,"is going to say self is going to be this object C, so just",1168.6,3.23,1171.83
412,"by default, OK?",1171.83,1.487,1173.317
413,"So when you're creating a coordinate object,",1173.317,1.833,1175.15
414,you're passing it all the variables except for self.,1175.15,5.11,1180.26
415,So this line here is going to call the init,1184.93,2.42,1187.3500000000001
416,and it's going to do every line inside the init.,1187.35,2.39,1189.74
417,"So it's going to create an x data attribute for C,",1189.74,4.91,1194.65
418,"a y data attribute for C, and it's",1194.65,2.28,1196.93
419,going to assign 3 and 4 to those respectively.,1196.93,4.87,1201.8
420,"This next line here is origin equals coordinate 0,",1201.8,3.5,1205.3
421,0 creates another object.,1205.3,3.51,1208.81
422,OK?,1208.81,1.36,1210.1699999999998
423,It's another coordinate object whose value for x is 0,1210.17,3.6,1213.77
424,and whose value for y is 0.,1213.77,2.43,1216.2
425,So now we have two coordinate objects.,1216.2,3.01,1219.21
426,We can access the data attributes,1219.21,2.33,1221.54
427,"using this dot notation and we've seen that before, right?",1221.54,3.312,1224.8519999999999
428,"When we've worked with lists we'd say something like,",1224.852,2.208,1227.0600000000002
429,"L dot append, right, when we create a list.",1227.06,3.07,1230.1299999999999
430,So the same dot notation can be used with your own objects,1230.13,4.7,1234.8300000000002
431,in order to access data attributes.,1234.83,2.52,1237.35
432,"So here, this is going to print 3",1237.35,2.37,1239.7199999999998
433,"because the x value for object C is 3,",1239.72,7.46,1247.18
434,"and the next line, print origin x",1247.18,1.92,1249.1000000000001
435,is going to print 0 because the x value for the object origin,1249.1,4.05,1253.1499999999999
436,is 0.,1253.15,1.68,1254.8300000000002
437,OK.,1254.83,0.95,1255.78
438,So we've created a coordinate object.,1255.78,3.67,1259.45
439,We have to find the init method so we,1259.45,1.61,1261.06
440,have a way to create objects when we use the class.,1261.06,4.15,1265.21
441,And then we can access the data attributes.,1265.21,3.05,1268.26
442,"But that's kind of lame, right, because there isn't anything",1268.26,3.27,1271.53
443,cool we can do with it.,1271.53,1.03,1272.56
444,There isn't ways to interact with this object.,1272.56,3.23,1275.79
445,So let's add some methods.,1275.79,1.98,1277.77
446,Remember methods are going to be procedural attributes that,1277.77,3.9,1281.67
447,allow us to interact with our object.,1281.67,3.36,1285.03
448,Methods are like functions except that there's,1285.03,2.85,1287.8799999999999
449,a couple of differences which you'll see in a moment.,1287.88,2.91,1290.7900000000002
450,"And when you're calling methods, you're",1290.79,3.0,1293.79
451,"using the dot operator, like L dot append, for example,",1293.79,4.59,1298.3799999999999
452,for lists.,1298.38,0.54,1298.92
453,So let's go back to defining our coordinate class,1301.81,3.84,1305.6499999999999
454,and let's define a method for it.,1305.65,2.59,1308.24
455,"So so far we've defined that part there,",1308.24,2.67,1310.91
456,class coordinate and an init.,1310.91,1.53,1312.44
457,So we have that.,1312.44,1.35,1313.79
458,So in this slide we're going to add this method here.,1313.79,4.37,1318.1599999999999
459,So this method here is going to say,1318.16,1.77,1319.93
460,I'm going to define a method called distance,1319.93,4.35,1324.28
461,and I'm going to pass in two parameters.,1324.28,1.89,1326.17
462,"Remember self, the first parameter,",1326.17,2.55,1328.72
463,is always going to be the instance of an object,1328.72,2.61,1331.33
464,that you're going to perform the operation on.,1331.33,3.41,1334.74
465,So pretty much by convention it's always named self.,1334.74,4.89,1339.63
466,"And then for this particular method,",1342.7,2.31,1345.01
467,"I'm going to give it another parameter,",1345.01,1.98,1346.99
468,and I can name this whatever I want.,1346.99,2.42,1349.41
469,I'm naming it other.,1349.41,1.7,1351.1100000000001
470,And this is going to represent the other coordinate object,1351.11,3.08,1354.1899999999998
471,for which I want to find the distance from my self.,1354.19,3.952,1358.142
472,So here I'm going to just implement,1358.142,1.458,1359.6000000000001
473,"the Euclidean distance formula, which is x1 minus x2 squared,",1359.6,6.72,1366.32
474,"plus Y1 minus Y2 squared, and square root of all that.",1366.32,4.43,1370.75
475,So that's what I'm doing inside here.,1370.75,3.62,1374.37
476,Self and other are coordinate objects.,1374.37,1.885,1376.2549999999999
477,"Inside this method, I have to refer to the x data",1379.15,5.79,1384.94
478,attributes of each object if I want,1384.94,1.95,1386.89
479,to find the difference between the 2x values from them.,1386.89,4.33,1391.22
480,"So that's why I'm doing self dot x here, right.",1391.22,3.05,1394.27
481,"If I just did x, I would be accessing just some variable",1394.27,2.97,1397.24
482,named x in a program which actually isn't even defined.,1397.24,5.01,1402.25
483,So you always have to refer when as we're,1402.25,4.734,1406.984
484,"thinking about classes, you always",1406.984,1.416,1408.3999999999999
485,have to refer to whose data attribute,1408.4,2.37,1410.77
486,do you want to access?,1410.77,2.1,1412.87
487,"In this case, I want to access the x data",1412.87,2.13,1415.0
488,"attribute of my self, and I want to subtract the x data",1415.0,3.84,1418.84
489,"attribute of this other coordinate,",1418.84,2.43,1421.27
490,"square that, same for y, square that, and then add those",1421.27,4.47,1425.74
491,and take the square root of that.,1425.74,2.58,1428.32
492,"So notice this method is pretty much like a function, right?",1428.32,2.79,1431.11
493,"You have DF, some name, it takes in parameters.",1431.11,3.72,1434.83
494,It does some stuff and then it returns a value.,1434.83,3.09,1437.9199999999998
495,The only difference is the fact that you have a self here,1437.92,3.35,1441.27
496,as the first thing and the fact that you always,1441.27,3.58,1444.85
497,have to be conscious about whose data attributes,1444.85,2.91,1447.76
498,you're accessing.,1447.76,0.75,1448.51
499,So you have to use the dot notation in order,1452.14,1.94,1454.0800000000002
500,to decide whose data attributes you want access.,1454.08,3.76,1457.84
501,"So we've defined the method here, distance.",1457.84,3.382,1461.222
502,So this is in the class definition.,1461.222,1.458,1462.68
503,Now how do we use it?,1462.68,2.49,1465.17
504,So let's assume that the definition of distance,1465.17,2.95,1468.1200000000001
505,is up here.,1468.12,0.88,1469.0
506,I didn't include the code.,1469.0,3.32,1472.32
507,But really all you need to know is what it takes.,1472.32,2.24,1474.56
508,It takes a self and an other.,1474.56,2.5,1477.06
509,So when you want to use this method,1477.06,2.43,1479.49
510,"to figure out a distance between two coordinate objects,",1479.49,2.64,1482.13
511,this is how you do it.,1482.13,1.36,1483.49
512,"So the first line, I create one coordinate object.",1483.49,3.62,1487.11
513,"Second line, I create another coordinate object.",1487.11,3.21,1490.32
514,"First one is named C, the second one is named 0.",1490.32,2.31,1492.6299999999999
515,These are two separate objects.,1492.63,3.26,1495.89
516,And I'm going to find the distance.,1495.89,4.52,1500.41
517,"And I want to first call it on one object,",1500.41,2.99,1503.4
518,"so I'm going to say C dot, so I'm using the dot notation",1503.4,3.94,1507.3400000000001
519,to call the method distance on object C.,1507.34,7.4,1514.74
520,So Python says this object C is of type coordinate.,1514.74,3.384,1518.124
521,It's going to look up at the class,1518.124,1.416,1519.54
522,coordinate that you defined.,1519.54,1.23,1520.77
523,It's going to find this method called distance,1520.77,2.58,1523.35
524,and then it's going to say what parameters does it take?,1523.35,2.94,1526.29
525,"So it takes another parameter, right, for the other",1526.29,3.33,1529.62
526,"and then, in the parentheses, I just",1529.62,2.07,1531.6899999999998
527,have to give it this other perimeter.,1531.69,3.9,1535.5900000000001
528,An easier way to see what happens,1535.59,2.28,1537.87
529,is by looking at what this line here is equivalent to.,1537.87,5.04,1542.9099999999999
530,So the third line here prints C dot,1546.0,2.56,1548.56
531,distance 0 is equivalent to this one on the right.,1548.56,3.099,1551.6589999999999
532,And this one on the right essentially,1551.659,1.541,1553.2
533,"says, what's the name of the class,",1553.2,4.42,1557.6200000000001
534,"dot, dot notation, what's the method you want to call,",1557.62,4.06,1561.6799999999998
535,and then in parentheses you give it,1561.68,2.22,1563.9
536,all of the variables including self.,1563.9,2.43,1566.3300000000002
537,OK.,1566.33,0.6,1566.9299999999998
538,So in this case you're explicitly telling Python,1566.93,2.82,1569.75
539,that self is C and other is 0.,1569.75,6.28,1576.03
540,"So this is a little bit easier to understand, like that.",1576.03,6.05,1582.08
541,But it's a little cumbersome because you always,1582.08,3.24,1585.32
542,"have to write coordinate dot, coordinate dot, coordinate dot,",1585.32,2.58,1587.8999999999999
543,for every data attribute you might want,1587.9,1.625,1589.525
544,"to access, for every procedural attribute you",1589.525,2.105,1591.63
545,might want to access.,1591.63,2.48,1594.1100000000001
546,"So by convention, it's a lot easier",1594.11,2.85,1596.9599999999998
547,to do the one on the left.,1596.96,3.05,1600.01
548,"And as I mentioned, Python implicitly says,",1600.01,2.85,1602.86
549,"if you're doing the one on the left,",1602.86,2.63,1605.49
550,you can call this method on a particular object,1605.49,2.41,1607.9
551,and it's going to look up the type of the object,1607.9,2.0,1609.9
552,and it's going to essentially convert this on the left,1609.9,3.0,1612.9
553,to the one on the right.,1612.9,1.941,1614.8410000000001
554,And this is what you've been using so far.,1614.841,1.749,1616.59
555,"So when you create a list, you say L is equal to 1, 2,",1616.59,3.03,1619.62
556,"and then you say L.append, you know, 3 or whatever.",1619.62,5.54,1625.1599999999999
557,So we've been using this notation on the left,1625.16,4.52,1629.68
558,pretty much from the beginning of class.,1629.68,4.56,1634.24
559,"So we have a coordinate class, we",1634.24,3.04,1637.28
560,"can create a coordinate object, we",1637.28,1.83,1639.11
561,can get the distance between two objects.,1639.11,3.006,1642.116
562,"As you're using the class, if you",1642.116,1.374,1643.49
563,"wanted to use this coordinate class,",1643.49,2.37,1645.86
564,"and you were maybe debugging at some point, a lot of you",1645.86,3.72,1649.58
565,"probably use print as a debug statement, right?",1649.58,2.58,1652.1599999999999
566,And maybe you want to print the value of a coordinate object.,1652.16,5.639,1657.799
567,"So if you create a coordinate object,",1657.799,1.541,1659.34
568,"C is equal to coordinate 3, 4, right?",1659.34,2.28,1661.62
569,That's what we've done so far.,1661.62,1.78,1663.3999999999999
570,"If you print C, you get this funny message.",1663.4,4.7,1668.1000000000001
571,"Very uninformative, right?",1668.1,1.47,1669.57
572,"It basically says, well, C is an object of type",1669.57,4.23,1673.8
573,coordinate at this memory location in the computer.,1673.8,6.489,1680.289
574,"Which is not what you wanted at all, right?",1680.289,1.791,1682.08
575,Maybe you wanted to know what the values for x and y were.,1682.08,2.91,1684.99
576,That would be a lot more informative.,1684.99,3.2,1688.19
577,"So by default, when you create your own type, when",1688.19,6.07,1694.26
578,"you print the object of that type,",1694.26,1.56,1695.82
579,Python tells you this sort of information,1695.82,1.8,1697.62
580,which is not what you want.,1697.62,2.05,1699.6699999999998
581,So what you need to do is you need,1699.67,1.52,1701.19
582,to define your own method that tells,1701.19,3.0,1704.19
583,Python what to do when you call print,1704.19,3.27,1707.46
584,on an object of this type.,1707.46,3.54,1711.0
585,"So this is going to be a special method, just",1711.0,3.21,1714.21
586,"like init is, because it starts and ends",1714.21,2.55,1716.76
587,with double underscores.,1716.76,2.89,1719.65
588,"And the name of the method is underscore, underscore, str,",1719.65,3.05,1722.7
589,"underscore, underscore.",1722.7,1.68,1724.38
590,"And if you define this method in your class, that tells Python,",1724.38,4.17,1728.5500000000002
591,"hey, when you see a print statement that's",1728.55,2.46,1731.01
592,"on an object of type coordinate, call this method,",1731.01,3.24,1734.25
593,"look what it does, and do everything that's inside it.",1734.25,4.5,1738.75
594,And you can choose to make it do whatever you want,1738.75,3.69,1742.44
595,inside your definition of str.,1742.44,3.48,1745.92
596,"In this case, let's say when we print a coordinate object,",1745.92,2.7,1748.6200000000001
597,we're going to print its x and y values surrounded,1748.62,2.67,1751.29
598,by angle brackets.,1751.29,1.83,1753.12
599,"That seems reasonable, right?",1753.12,1.83,1754.9499999999998
600,"So then from now on when you print coordinate objects,",1754.95,5.29,1760.24
601,"you're going to see things like this, which",1760.24,1.85,1762.09
602,is a lot more informative.,1762.09,3.57,1765.6599999999999
603,So how do we define this?,1765.66,1.97,1767.63
604,So so far we've defined all that and the last part,1767.63,4.98,1772.6100000000001
605,is going to be new.,1772.61,2.42,1775.03
606,"So we define the init and the distance,",1775.03,2.12,1777.1499999999999
607,and let's define this str.,1777.15,1.185,1778.335
608,"So underscore, underscore, str, underscore, underscore, is",1782.17,3.66,1785.8300000000002
609,a method.,1785.83,1.94,1787.77
610,It's only going to take self because you're just calling,1787.77,3.29,1791.06
611,print on the object itself.,1791.06,2.97,1794.03
612,There's no other parameters to it.,1794.03,3.52,1797.55
613,"Str has to return a string, and in this particular case,",1797.55,5.55,1803.1
614,we're going to return the string that's,1803.1,2.28,1805.3799999999999
615,"the angle brackets concatenated with the x value of the object,",1805.38,4.66,1810.0400000000002
616,"self.x, concatenated with a comma,",1810.04,3.32,1813.36
617,concatenated with the y value of this particular instance,1813.36,3.72,1817.08
618,"of an object, self.y, and then concatenated",1817.08,2.885,1819.965
619,with the angle brackets.,1819.965,1.0,1820.965
620,So now any time you have print on an object of type,1823.72,2.79,1826.51
621,"coordinate, you're going to call this special method str,",1826.51,3.15,1829.66
622,if it's implemented in your code.,1829.66,2.82,1832.48
623,Any questions?,1832.48,0.75,1833.23
624,OK.,1837.57,0.5,1838.07
625,So let's try to wrap our head around types and classes,1841.46,4.775,1846.2350000000001
626,because we've seen a lot today.,1846.235,1.291,1847.5259999999998
627,"Let's create a coordinate object,",1850.78,3.46,1854.24
628,"assign it 3, 4, as we have been, and assign it to variable C.",1854.24,6.05,1860.29
629,"We've implemented the str method, so when we print C,",1860.29,4.47,1864.76
630,it's going to print out this nice three comma for our angle,1864.76,2.67,1867.43
631,brackets.,1867.43,0.5,1867.93
632,"If we print the type of C, this is actually",1871.14,1.98,1873.1200000000001
633,"going to give us class main coordinate, which tells us",1873.12,4.43,1877.55
634,that C is going to be an object that,1877.55,10.22,1887.77
635,is of type class coordinate.,1887.77,2.794,1890.564
636,"If we look at coordinate as a class,",1893.37,4.13,1897.5
637,"if we print what coordinate is, coordinate is a class, right?",1897.5,2.82,1900.32
638,"So this is what Python tells us, if we print coordinate,",1900.32,2.52,1902.84
639,it's a class named coordinate.,1902.84,3.89,1906.73
640,"And if we print the type of a coordinate,",1906.73,1.75,1908.48
641,well that's just going to be a type.,1908.48,1.92,1910.4
642,So class is going to be a type.,1910.4,1.32,1911.72
643,So you're defining the type of an object.,1911.72,1.708,1913.428
644,If you'd like to figure out whether a particular object is,1916.77,5.18,1921.95
645,"an instance of a particular class,",1921.95,1.85,1923.8
646,you use this special function called is instance.,1923.8,3.28,1927.08
647,"So if you print is instance C comma coordinate,",1927.08,3.24,1930.32
648,this is going to print true because C is an object that,1930.32,3.39,1933.71
649,is of type coordinate.,1933.71,1.861,1935.5710000000001
650,Couple more words on these special operators.,1943.43,2.68,1946.1100000000001
651,So these special operators allow you,1946.11,1.61,1947.7199999999998
652,to customize your classes which can add some cool functionality,1947.72,4.05,1951.77
653,to them.,1951.77,1.64,1953.41
654,So these special operators are going,1953.41,3.39,1956.8000000000002
655,"to be things like addition, subtraction,",1956.8,2.91,1959.71
656,"using the equal equal sign, greater than, less than,",1959.71,2.43,1962.14
657,length and so on and so on.,1962.14,2.55,1964.69
658,"So just like str, if you implement",1964.69,3.45,1968.14
659,"any of these in your classes, this is going to tell Python.",1968.14,4.26,1972.4
660,"So for example, if we've implemented this underscore,",1972.4,3.91,1976.3100000000002
661,"underscore, add, underscore, underscore in our class,",1976.31,4.28,1980.59
662,this is going to tell Python when,1980.59,1.38,1981.97
663,you use this plus operator between two objects of type,1981.97,2.73,1984.7
664,coordinate to call this method.,1984.7,4.29,1988.99
665,If you have not implemented this method,1988.99,1.86,1990.85
666,"and you try to add two objects of type coordinate,",1990.85,2.22,1993.07
667,you're going to get an error because Python doesn't actually,1993.07,2.04,1995.11
668,know right off the bat how to add,1995.11,1.5,1996.61
669,"two coordinate objects, right?",1996.61,1.65,1998.26
670,You have to tell it how to do that.,1998.26,2.194,2000.454
671,And you tell it how to do that by implementing,2000.454,1.916,2002.37
672,this special method.,2002.37,3.99,2006.36
673,Same with subtract.,2006.36,0.99,2007.35
674,Same with equals.,2007.35,1.2,2008.55
675,So if you want to figure out whether two objects are equal.,2008.55,3.19,2011.74
676,"And when you implement these methods in your own class,",2011.74,3.44,2015.18
677,you can decide exactly what you want to do.,2015.18,4.024,2019.204
678,So what happens when you add two coordinate objects?,2019.204,2.166,2021.37
679,"Do you just add the x values, do you just add the y values,",2021.37,2.479,2023.849
680,"do you get them both together, do you",2023.849,1.541,2025.3899999999999
681,do whatever you'd like to do.,2025.39,2.82,2028.21
682,And then you document what you've decided.,2028.21,3.19,2031.4
683,So let's create a fraction object.,2031.4,2.856,2034.256
684,"So we've looked at coordinate, we",2034.256,1.374,2035.63
685,saw sort of a higher level car object.,2035.63,2.77,2038.4
686,Let's look at a fraction object.,2038.4,3.4,2041.8000000000002
687,"Fraction object is going to be, is",2041.8,3.0,2044.8
688,going represent a number that's going to be a numerator slash,2044.8,4.359,2049.159
689,denominator.,2049.159,2.241,2051.4
690,OK.,2051.4,0.5,2051.9
691,So that's going to be a fraction object.,2051.9,2.23,2054.13
692,So the way I've decided to internally represent a fraction,2054.13,3.68,2057.81
693,object is with two numbers.,2057.81,3.0,2060.81
694,And I've decided that I will not let them be floats.,2060.81,3.21,2064.02
695,"They have to be integers, hence the assert over here.",2064.02,5.69,2069.71
696,"So inside the init, I've decided I'm",2069.71,2.04,2071.75
697,"going to represent my fracture with two numbers, one",2071.75,5.969,2077.719
698,for the numerator and one for the denominator.,2077.719,4.161,2081.88
699,"So when I create a fraction object,",2081.88,1.58,2083.46
700,I'm going to pass in a numerator and a denominator.,2083.46,4.59,2088.05
701,And a particular instance is going,2088.05,3.0,2091.05
702,to have self dot numerator and self dot,2091.05,2.46,2093.51
703,denominator as its data attributes,2093.51,2.27,2095.78
704,and I'm assigning those to be whatever's passed into my init.,2095.78,4.215,2099.9950000000003
705,Since I plan on debugging this code maybe possibly sometime,2103.25,4.17,2107.42
706,"in the future, I'm also including an str method",2107.42,3.48,2110.9
707,and the str method is going to print a nice looking string,2110.9,9.45,2120.35
708,"that's going to represent the numerator, and then",2120.35,2.4,2122.75
709,"a slash, and then the denominator.",2122.75,3.816,2126.566
710,And then I've also implemented some other special methods.,2130.3,3.35,2133.65
711,How do I add two fractions?,2133.65,1.92,2135.57
712,How do I subtract two fractions?,2135.57,2.61,2138.1800000000003
713,And how do I convert a fraction to a float?,2138.18,4.23,2142.41
714,"The add and subtract are almost the same,",2142.41,1.71,2144.12
715,so let's look at the add for the moment.,2144.12,4.07,2148.19
716,How do we add two fractions?,2148.19,1.26,2149.4500000000003
717,"We're going to take self, which is the instance of an object",2152.52,6.89,2159.41
718,"that I want to do the add operation on,",2159.41,2.8,2162.21
719,"and we're going to take other, which",2162.21,1.5,2163.71
720,is the other instance of an object,2163.71,2.15,2165.86
721,"that I want to do the operation on, so the addition,",2165.86,3.27,2169.13
722,and I'm going to figure out the new top.,2169.13,2.22,2171.35
723,So the new top of the resulting fraction.,2171.35,3.81,2175.16
724,So it's my numerator multiplied by the other denominator,2175.16,4.95,2180.1099999999997
725,plus my denominator multiplied by the other numerator,2180.11,3.9,2184.01
726,and then divided by the multiplication of the two,2184.01,2.4,2186.4100000000003
727,denominators.,2186.41,2.4,2188.81
728,"So the top is going to be that, the bottom is going to be that.",2188.81,3.44,2192.25
729,"Notice that we're using self dot, right?",2192.25,2.7,2194.95
730,"Once again, we're trying to access",2194.95,1.53,2196.48
731,"the data attributes of each different instance,",2196.48,2.95,2199.43
732,"right, of myself and the other object that I'm working with.",2199.43,3.33,2202.7599999999998
733,So that's why I have to use self dot here.,2202.76,3.9,2206.6600000000003
734,"Once I figure out the top and the bottom of the addition,",2206.66,4.79,2211.45
735,"I'm going to return, and here notice I'm",2211.45,3.68,2215.1299999999997
736,returning a fraction object.,2215.13,3.06,2218.19
737,"It's not a number, it's not a float, it's not an integer.",2218.19,2.49,2220.68
738,It's a new object that is of the exact same type as the class,2220.68,3.21,2223.89
739,that I'm implementing.,2223.89,3.25,2227.14
740,"So as it's the same type of object,",2227.14,3.27,2230.41
741,then on the return value I can do,2230.41,1.894,2232.3039999999996
742,all of the exact same operations that I can do,2232.304,1.916,2234.2200000000003
743,on a regular fraction object.,2234.22,3.74,2237.9599999999996
744,Sub is going to be the same.,2237.96,1.627,2239.587
745,I'm returning a fraction object.,2239.587,1.333,2240.92
746,"Float is just going to do the division for me,",2244.25,6.08,2250.33
747,so it's going to take the numerator,2250.33,1.53,2251.86
748,"and then divide it by the denominator,",2251.86,2.49,2254.35
749,just divide the numbers.,2254.35,2.78,2257.13
750,And then I'm defining here my own method called inverse.,2257.13,5.66,2262.79
751,And this is just going to take the inverse of the instance I'm,2262.79,2.79,2265.58
752,calling this method on.,2265.58,1.68,2267.2599999999998
753,And so it's going to also return a new fraction object that just,2267.26,4.56,2271.82
754,has the denominator as the top part,2271.82,2.01,2273.8300000000004
755,and the numerator as the bottom part.,2273.83,1.701,2275.531
756,So then we have some code here.,2278.9,1.38,2280.28
757,So that's how I implement my fraction object.,2280.28,4.69,2284.9700000000003
758,So now let's use it and see what it gives us.,2284.97,3.07,2288.04
759,"A is equal to a fraction 1, 4.",2288.04,1.25,2289.29
760,This is going to be 1 over 4 for a.,2300.94,7.93,2308.87
761,And b is going to be 3 over four.,2308.87,2.73,2311.6
762,"When I do C, notice I'm using the plus operator between two",2315.24,6.16,2321.3999999999996
763,"fraction objects, right?",2321.4,1.53,2322.9300000000003
764,A and b are fraction objects so Python's,2322.93,2.25,2325.18
765,"going to say, OK, is there an underscore, underscore, add,",2325.18,3.579,2328.759
766,"underscore, underscore, method implemented?",2328.759,1.791,2330.55
767,It is and it's just going to do whatever's inside here.,2330.55,4.18,2334.73
768,So it's going to say self dot numerator plus other dot,2334.73,2.25,2336.98
769,denominator.,2336.98,0.982,2337.962
770,It's going to calculate the top and the bottom.,2337.962,1.958,2339.92
771,It's going to turn a new fraction object.,2339.92,1.736,2341.656
772,"So this is going to be 4 plus 12 divided by 16, and 16 over 16.",2345.47,21.63,2367.1
773,So C as a fraction object is going,2367.1,2.7,2369.7999999999997
774,to be 16 for the numerator and 16 for the denominator,2369.8,5.46,2375.26
775,because it's a fraction object.,2375.26,2.798,2378.058
776,"If I print C, it should print 16 over 16,",2383.89,2.4,2386.29
777,"so we can even run it, so print 16 over 16.",2386.29,4.47,2390.7599999999998
778,"If I print floats C, so this special method float here",2390.76,3.81,2394.57
779,"is going to say, is there a method that converts a fraction",2394.57,4.35,2398.92
780,to a float and there is.,2398.92,1.17,2400.09
781,It's this one implemented right here.,2400.09,2.139,2402.2290000000003
782,"So it's just going to divide the two numbers, top and bottom,",2402.229,2.541,2404.77
783,which gives me 1.,2404.77,2.25,2407.02
784,So it's this one here and here.,2407.02,3.7,2410.72
785,"Notice I'm doing the exact same method call,",2410.72,2.66,2413.3799999999997
786,except I'm doing it the other way where,2413.38,1.89,2415.27
787,"you type in the name of the class, name of the method,",2415.27,5.34,2420.61
788,"and then what you're calling it on,",2420.61,1.74,2422.35
789,"and this gives the exact same value here, 1.0.",2422.35,5.08,2427.43
790,And then here I'm calling the method inverse,2427.43,3.21,2430.64
791,on object B which is going to invert 3 over 4 to be 4 over 3.,2430.64,6.21,2436.85
792,And then I'm converting it to a float,2436.85,2.19,2439.04
793,and then I'm printing the value.,2439.04,1.38,2440.42
794,So it gives me 1.33.,2440.42,2.93,2443.35
795,So take a look at this code in more detail,2443.35,7.47,2450.8199999999997
796,and see if you can trace through all of those different things,2450.82,3.24,2454.06
797,and see if you can also write your own new fraction objects.,2454.06,3.5,2457.56
798,OK.,2457.56,0.7,2458.2599999999998
799,So last slide.,2458.26,2.1,2460.36
800,Power of object oriented programming,2460.36,2.37,2462.73
801,is that you can bundle together objects that,2462.73,2.01,2464.7400000000002
802,are of the exact same type.,2464.74,1.5,2466.24
803,And all of these objects are going,2466.24,1.44,2467.68
804,to have the same data representation,2467.68,2.04,2469.72
805,and the same methods that you can do on them.,2469.72,3.31,2473.0299999999997
806,"And ultimately, you're going to be building",2473.03,2.7,2475.73
807,these layers of abstraction.,2475.73,1.51,2477.2400000000002
808,So you're going to be building on a basic object type,2477.24,2.93,2480.1699999999996
809,"in Python, you're going to have integer objects, float objects.",2480.17,6.99,2487.16
810,"On top of those, you can create lists, dictionaries.",2487.16,2.946,2490.1059999999998
811,"And on top of those, you can even",2490.106,1.374,2491.48
812,create your own object types as we saw in this lecture today.,2491.48,5.6,2497.08
