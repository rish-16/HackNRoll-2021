"[{\"text\": \"The following content is\\nprovided under a Creative\", \"start\": 0.79, \"duration\": 2.4}, {\"text\": \"Commons license.\", \"start\": 3.19, \"duration\": 1.54}, {\"text\": \"Your support will help\\nMIT OpenCourseWare\", \"start\": 4.73, \"duration\": 2.3}, {\"text\": \"continue to offer high quality\\neducational resources for free.\", \"start\": 7.03, \"duration\": 4.36}, {\"text\": \"To make a donation or\\nview additional materials\", \"start\": 11.39, \"duration\": 2.6}, {\"text\": \"from hundreds of MIT courses,\\nvisit MIT OpenCourseWare\", \"start\": 13.99, \"duration\": 3.89}, {\"text\": \"at ocw.mit.edu.\", \"start\": 17.88, \"duration\": 0.96}, {\"text\": \"PROFESSOR: All right everyone.\", \"start\": 30.42, \"duration\": 1.25}, {\"text\": \"Let's get started.\", \"start\": 31.67, \"duration\": 2.28}, {\"text\": \"So today's lecture and\\nWednesday's lecture,\", \"start\": 33.95, \"duration\": 3.99}, {\"text\": \"we're going to talk\\nabout this thing called\", \"start\": 37.94, \"duration\": 2.01}, {\"text\": \"object oriented programming.\", \"start\": 39.95, \"duration\": 1.48}, {\"text\": \"And if you haven't\\nprogrammed before,\", \"start\": 41.43, \"duration\": 1.79}, {\"text\": \"I think this is a fairly\\ntough concept to grasp.\", \"start\": 43.22, \"duration\": 3.33}, {\"text\": \"But hopefully with\\nmany, many examples\", \"start\": 46.55, \"duration\": 3.18}, {\"text\": \"and just by looking at the\\ncode available from lectures,\", \"start\": 49.73, \"duration\": 5.79}, {\"text\": \"you'll hopefully get\\nthe hang of it quickly.\", \"start\": 55.52, \"duration\": 2.69}, {\"text\": \"So let's talk a little\\nbit about objects.\", \"start\": 58.21, \"duration\": 4.56}, {\"text\": \"And we've seen objects\\nin Python so far.\", \"start\": 62.77, \"duration\": 3.18}, {\"text\": \"Objects are basically\\ndata in Python.\", \"start\": 65.95, \"duration\": 3.21}, {\"text\": \"So every object that we've\\nseen has a certain type.\", \"start\": 69.16, \"duration\": 3.11}, {\"text\": \"OK, that we know.\", \"start\": 72.27, \"duration\": 1.915}, {\"text\": \"Behind the scenes,\\nthough, every object\", \"start\": 74.185, \"duration\": 1.965}, {\"text\": \"has these two additional things.\", \"start\": 76.15, \"duration\": 2.38}, {\"text\": \"One is some data representation.\", \"start\": 78.53, \"duration\": 1.75}, {\"text\": \"So how Python represents the\\nobject just behind the scenes\", \"start\": 80.28, \"duration\": 5.77}, {\"text\": \"and what are different\\nways that you\", \"start\": 86.05, \"duration\": 1.53}, {\"text\": \"can interact with the object.\", \"start\": 87.58, \"duration\": 3.42}, {\"text\": \"So for example, every one of\\nthese is a different object.\", \"start\": 91.0, \"duration\": 4.37}, {\"text\": \"For example, this\\nis the number 1,234.\", \"start\": 95.37, \"duration\": 3.6}, {\"text\": \"It's a specific object\\nthat is of type integer.\", \"start\": 98.97, \"duration\": 3.15}, {\"text\": \"The number 5 is a different\\nobject that's of type integer\", \"start\": 102.12, \"duration\": 3.82}, {\"text\": \"and so on.\", \"start\": 105.94, \"duration\": 0.98}, {\"text\": \"We've seen floats.\", \"start\": 106.92, \"duration\": 0.96}, {\"text\": \"We've seen strings.\", \"start\": 107.88, \"duration\": 1.11}, {\"text\": \"We've seen lists.\", \"start\": 108.99, \"duration\": 1.74}, {\"text\": \"Lists and dictionaries are\\nmore complicated objects.\", \"start\": 110.73, \"duration\": 3.85}, {\"text\": \"Object types.\", \"start\": 114.58, \"duration\": 0.7}, {\"text\": \"Sorry.\", \"start\": 115.28, \"duration\": 1.31}, {\"text\": \"But every object has a\\ntype, some sort of way\", \"start\": 116.59, \"duration\": 2.67}, {\"text\": \"that it's represented\\nin Python and some ways\", \"start\": 119.26, \"duration\": 3.909}, {\"text\": \"that we can interact with them.\", \"start\": 123.169, \"duration\": 1.291}, {\"text\": \"OK.\", \"start\": 127.02, \"duration\": 0.5}, {\"text\": \"So the idea behind object\\noriented programming\", \"start\": 127.52, \"duration\": 2.67}, {\"text\": \"is, first of all, everything\\nin Python is an object.\", \"start\": 130.19, \"duration\": 2.91}, {\"text\": \"We've said that before\\nand in this lecture\", \"start\": 133.1, \"duration\": 2.56}, {\"text\": \"I think we'll really\\nget at what that means.\", \"start\": 135.66, \"duration\": 2.03}, {\"text\": \"So we've seen strings,\\nintegers, dictionaries, lists.\", \"start\": 137.69, \"duration\": 3.63}, {\"text\": \"Those are all objects.\", \"start\": 141.32, \"duration\": 1.38}, {\"text\": \"When we did functions,\\nwe saw that we\", \"start\": 142.7, \"duration\": 1.8}, {\"text\": \"could pass as a parameter\\nanother function.\", \"start\": 144.5, \"duration\": 3.12}, {\"text\": \"So functions were also\\nobjects in Python.\", \"start\": 147.62, \"duration\": 2.12}, {\"text\": \"So literally everything\\nin Python is an object.\", \"start\": 149.74, \"duration\": 3.779}, {\"text\": \"So what are the kinds of\\nthings we can do with objects?\", \"start\": 153.519, \"duration\": 2.291}, {\"text\": \"Well, once you have a type,\\nyou can create a new object\", \"start\": 155.81, \"duration\": 3.42}, {\"text\": \"that is of some type.\", \"start\": 159.23, \"duration\": 1.314}, {\"text\": \"And you can create\\nas many objects\", \"start\": 160.544, \"duration\": 1.416}, {\"text\": \"as you'd like of that\\nparticular type, right?\", \"start\": 161.96, \"duration\": 2.91}, {\"text\": \"An integer 5 and integer 7.\", \"start\": 164.87, \"duration\": 2.07}, {\"text\": \"Those all work in a program.\", \"start\": 166.94, \"duration\": 3.21}, {\"text\": \"Once you've created\\nthese new objects,\", \"start\": 170.15, \"duration\": 2.49}, {\"text\": \"you can manipulate them.\", \"start\": 172.64, \"duration\": 1.65}, {\"text\": \"So for a list, for example,\\nyou can append an item\", \"start\": 174.29, \"duration\": 2.28}, {\"text\": \"to the end of the list,\\nyou can delete an item,\", \"start\": 176.57, \"duration\": 2.85}, {\"text\": \"remove it, concatenate\\ntwo lists together.\", \"start\": 179.42, \"duration\": 4.56}, {\"text\": \"So that's ways that you\\ncan interact with objects.\", \"start\": 183.98, \"duration\": 3.041}, {\"text\": \"And the last thing you can\\ndo is you can destroy them.\", \"start\": 187.021, \"duration\": 2.249}, {\"text\": \"So and with lists,\\nwe saw explicitly\", \"start\": 189.27, \"duration\": 1.73}, {\"text\": \"that you can delete\\nelements from a list,\", \"start\": 191.0, \"duration\": 2.976}, {\"text\": \"or you can just\\nforget about them\", \"start\": 193.976, \"duration\": 1.374}, {\"text\": \"by reassigning a variable\\nto another value,\", \"start\": 195.35, \"duration\": 4.03}, {\"text\": \"and then at some\\npoint, Python will\", \"start\": 199.38, \"duration\": 2.54}, {\"text\": \"collect all of these dead\\nobjects and reclaim the memory.\", \"start\": 201.92, \"duration\": 2.77}, {\"text\": \"So let's continue\\nexploring what objects are.\", \"start\": 207.81, \"duration\": 3.98}, {\"text\": \"So let's say I have these\\ntwo separate objects.\", \"start\": 211.79, \"duration\": 2.53}, {\"text\": \"One is a blue car.\", \"start\": 214.32, \"duration\": 1.13}, {\"text\": \"One is a pink car.\", \"start\": 215.45, \"duration\": 1.5}, {\"text\": \"So objects are really\\ndata abstractions.\", \"start\": 216.95, \"duration\": 2.79}, {\"text\": \"So these two cars can be\\ncreated by the same blueprint.\", \"start\": 219.74, \"duration\": 3.31}, {\"text\": \"OK?\", \"start\": 223.05, \"duration\": 0.62}, {\"text\": \"This is a blueprint for a car\\nand if an object is a data\", \"start\": 223.67, \"duration\": 3.73}, {\"text\": \"abstraction, there's two\\nthings that this abstraction\", \"start\": 227.4, \"duration\": 2.24}, {\"text\": \"is going to capture.\", \"start\": 229.64, \"duration\": 1.3}, {\"text\": \"The first is some sort\\nof representation.\", \"start\": 230.94, \"duration\": 3.26}, {\"text\": \"What is going to represent the\\ncar, what data represents a car\", \"start\": 234.2, \"duration\": 3.11}, {\"text\": \"object?\", \"start\": 237.31, \"duration\": 1.23}, {\"text\": \"And the second is\\nwhat are ways that we\", \"start\": 238.54, \"duration\": 1.86}, {\"text\": \"can interact with the object?\", \"start\": 240.4, \"duration\": 2.68}, {\"text\": \"So if we think about\\na car blueprint,\", \"start\": 243.08, \"duration\": 2.93}, {\"text\": \"some general\\nrepresentation for a car\", \"start\": 246.01, \"duration\": 2.37}, {\"text\": \"could be the number of wheels\\nit has, the number of doors\", \"start\": 248.38, \"duration\": 2.52}, {\"text\": \"it has, maybe its\\nlength, maybe its height,\", \"start\": 250.9, \"duration\": 2.55}, {\"text\": \"so this is all part of what\\ndata represents the car.\", \"start\": 253.45, \"duration\": 6.129}, {\"text\": \"OK?\", \"start\": 259.579, \"duration\": 1.57}, {\"text\": \"The interface for\\nthe car is what\", \"start\": 261.149, \"duration\": 1.681}, {\"text\": \"are ways that you\\ncan interact with it.\", \"start\": 262.83, \"duration\": 1.75}, {\"text\": \"So for example, you\\ncould paint a car, right?\", \"start\": 264.58, \"duration\": 3.535}, {\"text\": \"So you could change its color.\", \"start\": 268.115, \"duration\": 2.605}, {\"text\": \"You could have the\\ncar make a noise\", \"start\": 270.72, \"duration\": 3.29}, {\"text\": \"and different cars might\\nmake different noises.\", \"start\": 274.01, \"duration\": 2.33}, {\"text\": \"Or you can drive the car, right?\", \"start\": 276.34, \"duration\": 1.72}, {\"text\": \"So these are all ways that\\nyou can interact with the car.\", \"start\": 278.06, \"duration\": 2.55}, {\"text\": \"Whereas the representation\\nare what makes up the car.\", \"start\": 280.61, \"duration\": 2.52}, {\"text\": \"What data abstractions\\nmake up the car.\", \"start\": 283.13, \"duration\": 5.46}, {\"text\": \"Let's bring it a little closer\\nto home by looking at a list.\", \"start\": 288.59, \"duration\": 5.04}, {\"text\": \"So we have this data\\ntype of list, right?\", \"start\": 293.63, \"duration\": 3.36}, {\"text\": \"We've worked with lists before.\", \"start\": 296.99, \"duration\": 3.78}, {\"text\": \"The list with elements 1, 2, 3,\\nand 4 is a very specific object\", \"start\": 300.77, \"duration\": 4.26}, {\"text\": \"that is of type list.\", \"start\": 305.03, \"duration\": 2.7}, {\"text\": \"Again, we think about it\\nin terms of two things.\", \"start\": 307.73, \"duration\": 2.2}, {\"text\": \"One is what is the data\\nrepresentation of the list?\", \"start\": 309.93, \"duration\": 3.57}, {\"text\": \"So behind the scenes how\\ndoes Python see lists?\", \"start\": 313.5, \"duration\": 2.837}, {\"text\": \"And the second is, how do\\nyou interact with lists?\", \"start\": 316.337, \"duration\": 2.083}, {\"text\": \"So what are ways that\\nyou can manipulate a list\", \"start\": 318.42, \"duration\": 1.958}, {\"text\": \"object once it's created?\", \"start\": 320.378, \"duration\": 2.882}, {\"text\": \"So behind the scenes\\nyou have a list, L,\", \"start\": 323.26, \"duration\": 3.1}, {\"text\": \"which is going to be made up\\nof essentially two things.\", \"start\": 326.36, \"duration\": 2.67}, {\"text\": \"One is going to be the\\nvalue at specific index.\", \"start\": 329.03, \"duration\": 5.25}, {\"text\": \"OK?\", \"start\": 334.28, \"duration\": 0.69}, {\"text\": \"So at index 0, it has\\nthe value 1, right,\", \"start\": 334.97, \"duration\": 2.28}, {\"text\": \"because it's the first\\nelement in the list.\", \"start\": 337.25, \"duration\": 2.52}, {\"text\": \"And the second thing\\nthat represents a list\", \"start\": 339.77, \"duration\": 3.24}, {\"text\": \"is going to be this second\\npart, which is a pointer.\", \"start\": 343.01, \"duration\": 4.98}, {\"text\": \"And internally this\\npointer is going\", \"start\": 347.99, \"duration\": 1.7}, {\"text\": \"to tell Python\\nwhere is the memory\", \"start\": 349.69, \"duration\": 2.73}, {\"text\": \"location in the computer where\\nyou can access the element\", \"start\": 352.42, \"duration\": 5.19}, {\"text\": \"index 1.\", \"start\": 357.61, \"duration\": 1.32}, {\"text\": \"So it's just essentially\\ngoing to be a chain,\", \"start\": 358.93, \"duration\": 3.39}, {\"text\": \"going from one\\nindex to the other.\", \"start\": 362.32, \"duration\": 2.02}, {\"text\": \"And at the next memory location\\nyou have the value at index 1,\", \"start\": 364.34, \"duration\": 4.165}, {\"text\": \"and then you have\\nanother pointer\", \"start\": 368.505, \"duration\": 1.375}, {\"text\": \"that takes you to the\\nlocation in memory\", \"start\": 369.88, \"duration\": 1.74}, {\"text\": \"where the index 2 is located.\", \"start\": 371.62, \"duration\": 2.82}, {\"text\": \"And in index 2 you\\nhave the value and then\", \"start\": 374.44, \"duration\": 1.89}, {\"text\": \"the next pointer,\\nand so on and so on.\", \"start\": 376.33, \"duration\": 3.16}, {\"text\": \"So this is how Python\\ninternally represents a list.\", \"start\": 379.49, \"duration\": 4.26}, {\"text\": \"OK?\", \"start\": 383.75, \"duration\": 1.81}, {\"text\": \"How you manipulate lists,\\nwe've done this a lot, right?\", \"start\": 385.56, \"duration\": 2.78}, {\"text\": \"You can index into a list, you\\ncan add two lists together,\", \"start\": 388.34, \"duration\": 6.07}, {\"text\": \"you can get the length, you can\\nappend to the end of a list,\", \"start\": 394.41, \"duration\": 2.75}, {\"text\": \"you can sort a list, reverse a\\nlist, and so many other things,\", \"start\": 397.16, \"duration\": 2.7}, {\"text\": \"right?\", \"start\": 399.86, \"duration\": 0.84}, {\"text\": \"So these are all\\nways that you can\", \"start\": 400.7, \"duration\": 1.416}, {\"text\": \"interact with the list object\\nas soon as you've created it.\", \"start\": 402.116, \"duration\": 3.114}, {\"text\": \"So notice both of these,\\nthe internal representation\", \"start\": 405.23, \"duration\": 3.36}, {\"text\": \"and how you\\nmanipulate lists, you\", \"start\": 408.59, \"duration\": 1.68}, {\"text\": \"don't actually\\nknow internally how\", \"start\": 410.27, \"duration\": 3.33}, {\"text\": \"these are represented, right?\", \"start\": 413.6, \"duration\": 1.47}, {\"text\": \"How did whoever\\nwrote the list class\", \"start\": 415.07, \"duration\": 2.64}, {\"text\": \"decide to implement a sort.\", \"start\": 417.71, \"duration\": 1.41}, {\"text\": \"We don't know.\", \"start\": 419.12, \"duration\": 1.32}, {\"text\": \"You also weren't aware of how\\nthese lists were represented\", \"start\": 420.44, \"duration\": 2.94}, {\"text\": \"internally.\", \"start\": 423.38, \"duration\": 0.51}, {\"text\": \"And you didn't\\nneed to know that.\", \"start\": 423.89, \"duration\": 1.38}, {\"text\": \"That's the beauty of\\nobject oriented programming\", \"start\": 425.27, \"duration\": 3.03}, {\"text\": \"and having these\\ndata abstractions.\", \"start\": 428.3, \"duration\": 2.84}, {\"text\": \"The representations are\\nprivate of these objects\", \"start\": 431.14, \"duration\": 2.73}, {\"text\": \"and they are only known by what\\nyou can find out how it's done,\", \"start\": 433.87, \"duration\": 4.08}, {\"text\": \"but they only should be known\\nby whoever implemented them.\", \"start\": 437.95, \"duration\": 3.49}, {\"text\": \"You, as someone who\\nuses this class,\", \"start\": 441.44, \"duration\": 1.7}, {\"text\": \"doesn't really need to know\\nhow a list is represented\", \"start\": 443.14, \"duration\": 2.4}, {\"text\": \"internally in order\\nto be able to use it\", \"start\": 445.54, \"duration\": 2.35}, {\"text\": \"and to write cool\\nprograms with them.\", \"start\": 447.89, \"duration\": 3.09}, {\"text\": \"OK?\", \"start\": 450.98, \"duration\": 1.45}, {\"text\": \"So just find a\\nmotivation here before we\", \"start\": 452.43, \"duration\": 3.5}, {\"text\": \"start writing our\\nown types of objects\", \"start\": 455.93, \"duration\": 2.67}, {\"text\": \"is the advantages of\\nobject oriented programming\", \"start\": 458.6, \"duration\": 2.73}, {\"text\": \"is really that\\nyou're able to bundle\", \"start\": 461.33, \"duration\": 2.94}, {\"text\": \"this data, bundle some\\ninternal representation,\", \"start\": 464.27, \"duration\": 3.35}, {\"text\": \"and some ways to interact with\\na program into these packages.\", \"start\": 467.62, \"duration\": 4.14}, {\"text\": \"And with these packages,\\nyou can create objects\", \"start\": 471.76, \"duration\": 3.544}, {\"text\": \"and all of these\\nobjects are going\", \"start\": 475.304, \"duration\": 1.416}, {\"text\": \"to behave the exact same way.\", \"start\": 476.72, \"duration\": 1.208}, {\"text\": \"They're going to have the\\nsame internal representation\", \"start\": 477.928, \"duration\": 2.262}, {\"text\": \"and the same way that you\\ncan interact with them.\", \"start\": 480.19, \"duration\": 3.07}, {\"text\": \"And ultimately, this is going to\\ncontribute to the decomposition\", \"start\": 483.26, \"duration\": 4.89}, {\"text\": \"and abstraction ideas\\nthat we talked about when\", \"start\": 488.15, \"duration\": 3.69}, {\"text\": \"we talked about functions.\", \"start\": 491.84, \"duration\": 1.387}, {\"text\": \"And that means that\\nyou're going to be\", \"start\": 493.227, \"duration\": 1.583}, {\"text\": \"able to write code that's a lot\\nmore reusable and a lot easier\", \"start\": 494.81, \"duration\": 4.47}, {\"text\": \"to read in the future.\", \"start\": 499.28, \"duration\": 1.53}, {\"text\": \"OK.\", \"start\": 500.81, \"duration\": 2.49}, {\"text\": \"So just like when we\\ntalked about functions,\", \"start\": 503.3, \"duration\": 2.85}, {\"text\": \"we're going to sort\\nof separate the code\", \"start\": 506.15, \"duration\": 2.1}, {\"text\": \"that we talk about today into\\ncode where you implement a data\", \"start\": 508.25, \"duration\": 6.21}, {\"text\": \"type and code where you use\\nan object that you create.\", \"start\": 514.46, \"duration\": 5.849}, {\"text\": \"OK?\", \"start\": 520.309, \"duration\": 0.541}, {\"text\": \"So remember when we\\ntalked about functions,\", \"start\": 520.85, \"duration\": 1.791}, {\"text\": \"you were thinking about it in\\nterms of writing a function,\", \"start\": 522.641, \"duration\": 2.986}, {\"text\": \"so you had to worry\\nabout the details of how\", \"start\": 525.627, \"duration\": 1.833}, {\"text\": \"you implement a function.\", \"start\": 527.46, \"duration\": 1.64}, {\"text\": \"And then you had\\nto worry about just\", \"start\": 529.1, \"duration\": 1.65}, {\"text\": \"how to use a function, right?\", \"start\": 530.75, \"duration\": 1.39}, {\"text\": \"So it's sort of the\\nsame idea today.\", \"start\": 532.14, \"duration\": 3.49}, {\"text\": \"So when you're thinking about\\nimplementing your own data\", \"start\": 535.63, \"duration\": 5.18}, {\"text\": \"type, you do that with\\nthis thing called a class.\", \"start\": 540.81, \"duration\": 3.94}, {\"text\": \"And when you create\\na class, you're\", \"start\": 548.5, \"duration\": 1.95}, {\"text\": \"basically going to\\nfigure out what name you\", \"start\": 550.45, \"duration\": 1.82}, {\"text\": \"want to give your\\nclass and you're\", \"start\": 552.27, \"duration\": 1.63}, {\"text\": \"going to find some attributes.\", \"start\": 553.9, \"duration\": 2.156}, {\"text\": \"And attributes are\\ngoing to be the data\", \"start\": 556.056, \"duration\": 1.624}, {\"text\": \"representation and ways that you\\ncan interact with your object.\", \"start\": 557.68, \"duration\": 4.184}, {\"text\": \"So you, as the\\nprogrammer of this class,\", \"start\": 561.864, \"duration\": 1.666}, {\"text\": \"are going to decide\\nhow you want people\", \"start\": 563.53, \"duration\": 2.07}, {\"text\": \"to interact with the object\\nand what data this object\", \"start\": 565.6, \"duration\": 4.18}, {\"text\": \"is going to have.\", \"start\": 569.78, \"duration\": 3.08}, {\"text\": \"So for example,\\nsomeone wrote code\", \"start\": 572.86, \"duration\": 2.42}, {\"text\": \"that implements a\\nlist class, right,\", \"start\": 575.28, \"duration\": 2.1}, {\"text\": \"and we don't actually\\nknow how that was done.\", \"start\": 577.38, \"duration\": 2.49}, {\"text\": \"But we can find out.\", \"start\": 579.87, \"duration\": 3.31}, {\"text\": \"So creating the class is\\nimplementing the class\", \"start\": 583.18, \"duration\": 4.53}, {\"text\": \"and figuring out data\\nrepresentation and ways\", \"start\": 587.71, \"duration\": 1.98}, {\"text\": \"to interact with the class.\", \"start\": 589.69, \"duration\": 2.58}, {\"text\": \"Once that's done, you\\ncan then use your class.\", \"start\": 592.27, \"duration\": 3.3}, {\"text\": \"And you use the\\nclass by creating\", \"start\": 595.57, \"duration\": 2.34}, {\"text\": \"new instances of the class.\", \"start\": 597.91, \"duration\": 4.254}, {\"text\": \"So when you create\\na new instance,\", \"start\": 602.164, \"duration\": 1.416}, {\"text\": \"you essentially\\ncreate a new object\", \"start\": 603.58, \"duration\": 2.13}, {\"text\": \"that has the type, the\\nname of your class.\", \"start\": 605.71, \"duration\": 3.72}, {\"text\": \"And you can create as many\\nobjects as you'd like.\", \"start\": 609.43, \"duration\": 2.13}, {\"text\": \"You can do all the\\noperations that you've\", \"start\": 611.56, \"duration\": 2.82}, {\"text\": \"defined on the class.\", \"start\": 614.38, \"duration\": 2.28}, {\"text\": \"So for example,\\nsomeone wrote the code\", \"start\": 616.66, \"duration\": 1.995}, {\"text\": \"to implement list class\\nand then you can just\", \"start\": 618.655, \"duration\": 1.875}, {\"text\": \"use the list class like this.\", \"start\": 620.53, \"duration\": 1.39}, {\"text\": \"You can create a new list, you\\ncan get the length pf the list,\", \"start\": 621.92, \"duration\": 3.41}, {\"text\": \"you can append to the end of\\nthe list, and so on and so on.\", \"start\": 625.33, \"duration\": 2.99}, {\"text\": \"So let's start defining\\nour own types, OK?\", \"start\": 633.55, \"duration\": 4.29}, {\"text\": \"So now you're going\\nto define classes,\", \"start\": 637.84, \"duration\": 1.962}, {\"text\": \"you're going to\\nwrite classes which\", \"start\": 639.802, \"duration\": 1.458}, {\"text\": \"are going to define your\\nown types of objects.\", \"start\": 641.26, \"duration\": 4.4}, {\"text\": \"So for today's\\nlecture we're going\", \"start\": 645.66, \"duration\": 2.09}, {\"text\": \"to look at code\\nthat's going to be\", \"start\": 647.75, \"duration\": 2.49}, {\"text\": \"in the context of a\\ncoordinate object.\", \"start\": 650.24, \"duration\": 2.97}, {\"text\": \"And a coordinate\\nobject is essentially\", \"start\": 653.21, \"duration\": 1.65}, {\"text\": \"going to be an object\\nthat's going to define\", \"start\": 654.86, \"duration\": 8.12}, {\"text\": \"a point in an xy plane.\", \"start\": 662.98, \"duration\": 4.42}, {\"text\": \"So x, y is going to be a\\ncoordinate in a 2D plane.\", \"start\": 667.4, \"duration\": 4.652}, {\"text\": \"So we're going to\\nwrite code that's\", \"start\": 672.052, \"duration\": 1.458}, {\"text\": \"going to allow us to\\ndefine that kind of object.\", \"start\": 673.51, \"duration\": 2.375}, {\"text\": \"So the way we do that is\\nwe have to define a class.\", \"start\": 678.83, \"duration\": 3.974}, {\"text\": \"So we have to tell Python,\\nhey, I'm defining my own object\", \"start\": 682.804, \"duration\": 2.416}, {\"text\": \"type.\", \"start\": 685.22, \"duration\": 1.05}, {\"text\": \"So you do that with\\nthis class key word.\", \"start\": 686.27, \"duration\": 1.8}, {\"text\": \"So you say class, then you\\nsay the name of your type.\", \"start\": 688.07, \"duration\": 3.81}, {\"text\": \"In this case, we're creating\\na type called coordinate.\", \"start\": 691.88, \"duration\": 2.58}, {\"text\": \"Just like we had type list,\\ntype string, and so on.\", \"start\": 694.46, \"duration\": 2.71}, {\"text\": \"This is going to be a\\ntype called coordinate.\", \"start\": 697.17, \"duration\": 3.45}, {\"text\": \"And then in\\nparentheses here, you\", \"start\": 700.62, \"duration\": 1.5}, {\"text\": \"put what the parents\\nof the class are.\", \"start\": 702.12, \"duration\": 2.37}, {\"text\": \"For today's lecture, the\\nparent of the classes\", \"start\": 704.49, \"duration\": 4.1}, {\"text\": \"are going to be this\\nthing called object,\", \"start\": 708.59, \"duration\": 1.89}, {\"text\": \"and object is the very\\nbasic type in Python.\", \"start\": 710.48, \"duration\": 5.7}, {\"text\": \"It is the most basic\\ntype in Python.\", \"start\": 716.18, \"duration\": 2.07}, {\"text\": \"And it implements things like\\nbeing able to assign variables.\", \"start\": 718.25, \"duration\": 3.96}, {\"text\": \"So really, really\\nbasic operations\", \"start\": 722.21, \"duration\": 1.77}, {\"text\": \"that you can do with objects.\", \"start\": 723.98, \"duration\": 2.76}, {\"text\": \"So your coordinate\\nis therefore going\", \"start\": 726.74, \"duration\": 1.59}, {\"text\": \"to be an object in Python.\", \"start\": 728.33, \"duration\": 1.615}, {\"text\": \"All right.\", \"start\": 732.63, \"duration\": 0.5}, {\"text\": \"So we've told Python we\\nwanted to define an object.\", \"start\": 733.13, \"duration\": 3.45}, {\"text\": \"So inside the class definition\\nwe're going to put attributes.\", \"start\": 736.58, \"duration\": 2.89}, {\"text\": \"So what are attributes?\", \"start\": 739.47, \"duration\": 2.35}, {\"text\": \"Attributes are going to be\\ndata and procedures that\", \"start\": 741.82, \"duration\": 2.79}, {\"text\": \"belong to the class, OK?\", \"start\": 744.61, \"duration\": 2.39}, {\"text\": \"Data are going to be the data\\nrepresentations and procedures\", \"start\": 747.0, \"duration\": 2.95}, {\"text\": \"are going to be ways that we\\ncan interact with the object.\", \"start\": 749.95, \"duration\": 3.68}, {\"text\": \"The fact that they\\nbelong to the class\", \"start\": 753.63, \"duration\": 2.28}, {\"text\": \"means that the data and the\\nprocedures that we write\", \"start\": 755.91, \"duration\": 2.76}, {\"text\": \"are only going to work with\\nan object of this type.\", \"start\": 758.67, \"duration\": 2.82}, {\"text\": \"OK.\", \"start\": 761.49, \"duration\": 0.78}, {\"text\": \"If you try to use any of\\nthe data or the procedures\", \"start\": 762.27, \"duration\": 2.832}, {\"text\": \"with an object of\\na different type,\", \"start\": 765.102, \"duration\": 1.458}, {\"text\": \"you're going to get an\\nerror because these data\", \"start\": 766.56, \"duration\": 4.47}, {\"text\": \"and these attributes will\\nbelong to this particular class.\", \"start\": 771.03, \"duration\": 5.85}, {\"text\": \"So the data attributes is,\\nwhat is the object, right?\", \"start\": 779.41, \"duration\": 5.4}, {\"text\": \"What is the data that\\nmakes up the object?\", \"start\": 784.81, \"duration\": 2.68}, {\"text\": \"So for our coordinate\\nexample, it's\", \"start\": 787.49, \"duration\": 1.73}, {\"text\": \"going to be the x and y\\nvalues for coordinate.\", \"start\": 789.22, \"duration\": 3.204}, {\"text\": \"We can decide that\\ncan be ints, we\", \"start\": 792.424, \"duration\": 1.416}, {\"text\": \"can decide that we can\\nlet them be floats,\", \"start\": 793.84, \"duration\": 2.07}, {\"text\": \"but it's going to have one\\nvalue for the x-coordinate\", \"start\": 795.91, \"duration\": 3.09}, {\"text\": \"and one value for\\nthe y-coordinate.\", \"start\": 799.0, \"duration\": 1.757}, {\"text\": \"So those are data attributes.\", \"start\": 803.96, \"duration\": 1.72}, {\"text\": \"And procedure attributes\\nare better known as methods.\", \"start\": 805.68, \"duration\": 3.93}, {\"text\": \"And you can think of a\\nmethod as a function.\", \"start\": 809.61, \"duration\": 2.479}, {\"text\": \"Except that it's a\\nfunction that only\", \"start\": 812.089, \"duration\": 1.541}, {\"text\": \"works with this\\nparticular type of object.\", \"start\": 813.63, \"duration\": 3.7}, {\"text\": \"So with a coordinate\\nobject, in this case.\", \"start\": 817.33, \"duration\": 3.58}, {\"text\": \"So the methods are\\ngoing to define how you\", \"start\": 820.91, \"duration\": 1.75}, {\"text\": \"can interact with the object.\", \"start\": 822.66, \"duration\": 1.44}, {\"text\": \"So in a list, for\\nexample, we've said\", \"start\": 824.1, \"duration\": 1.775}, {\"text\": \"that you can append an item\\nto the end of the list,\", \"start\": 825.875, \"duration\": 2.125}, {\"text\": \"we can sort a list,\\nthings like that.\", \"start\": 828.0, \"duration\": 2.52}, {\"text\": \"So when you're defining\\nmethods, you're\", \"start\": 830.52, \"duration\": 2.07}, {\"text\": \"defining ways that people can\\ninteract with your object.\", \"start\": 832.59, \"duration\": 2.53}, {\"text\": \"So for example, for\\na coordinate object,\", \"start\": 835.12, \"duration\": 1.68}, {\"text\": \"we can say that we can take\\nthe distance between two\", \"start\": 836.8, \"duration\": 2.39}, {\"text\": \"coordinate points.\", \"start\": 839.19, \"duration\": 1.46}, {\"text\": \"OK?\", \"start\": 840.65, \"duration\": 0.73}, {\"text\": \"And that's going to be a\\nway that you can interact\", \"start\": 841.38, \"duration\": 2.083}, {\"text\": \"with two coordinate points.\", \"start\": 843.463, \"duration\": 2.897}, {\"text\": \"And just to be clear,\\nthese are going\", \"start\": 846.36, \"duration\": 3.27}, {\"text\": \"to belong to this\\nclass, which means\", \"start\": 849.63, \"duration\": 1.5}, {\"text\": \"that if you try to use this\\ndistance method on two lists,\", \"start\": 851.13, \"duration\": 3.18}, {\"text\": \"for example, you're\\ngoing to get an error.\", \"start\": 854.31, \"duration\": 1.83}, {\"text\": \"Because this distance method was\\nonly defined to work with two\", \"start\": 856.14, \"duration\": 3.12}, {\"text\": \"coordinate type objects.\", \"start\": 859.26, \"duration\": 1.271}, {\"text\": \"All right, so let's\\ncarry on and continue\", \"start\": 863.12, \"duration\": 3.56}, {\"text\": \"implementing our class.\", \"start\": 866.68, \"duration\": 2.07}, {\"text\": \"So we've written this\\nfirst line so far,\", \"start\": 868.75, \"duration\": 2.55}, {\"text\": \"class coordinate object.\", \"start\": 871.3, \"duration\": 1.34}, {\"text\": \"So now let's define attributes.\", \"start\": 872.64, \"duration\": 3.1}, {\"text\": \"First thing we're going to\\ndefine are data attributes.\", \"start\": 875.74, \"duration\": 3.9}, {\"text\": \"Generally you define data\\nattributes inside this init,\", \"start\": 879.64, \"duration\": 5.08}, {\"text\": \"and this is underscore,\\nunderscore, init, underscore,\", \"start\": 884.72, \"duration\": 2.48}, {\"text\": \"underscore, and it's a special\\nmethod or function in a class.\", \"start\": 887.2, \"duration\": 5.31}, {\"text\": \"And the special\\nmethod tells Python,\", \"start\": 892.51, \"duration\": 3.487}, {\"text\": \"when you implement\\nthe special method,\", \"start\": 895.997, \"duration\": 1.583}, {\"text\": \"it tells Python when you first\\ncreate an object of this type,\", \"start\": 897.58, \"duration\": 3.36}, {\"text\": \"call this method or\\ncall this function.\", \"start\": 900.94, \"duration\": 2.07}, {\"text\": \"So how do we do that?\", \"start\": 906.47, \"duration\": 1.61}, {\"text\": \"So let's implement it.\", \"start\": 908.08, \"duration\": 1.68}, {\"text\": \"So we say df because\\nit's just a function.\", \"start\": 909.76, \"duration\": 4.53}, {\"text\": \"The name is the\\nspecial name, init.\", \"start\": 914.29, \"duration\": 3.3}, {\"text\": \"And we give it some\\nparameters, right,\", \"start\": 917.59, \"duration\": 1.8}, {\"text\": \"just like any other function.\", \"start\": 919.39, \"duration\": 3.29}, {\"text\": \"These last two\\nparameters are x and y,\", \"start\": 922.68, \"duration\": 3.57}, {\"text\": \"which are going to represent how\\nyou create a coordinate object.\", \"start\": 926.25, \"duration\": 5.09}, {\"text\": \"So you give it a value\\nfor the x-coordinate\", \"start\": 931.34, \"duration\": 1.96}, {\"text\": \"and you give it a value\\nfor the y-coordinate.\", \"start\": 933.3, \"duration\": 3.02}, {\"text\": \"The self, however, is\\na little bit trickier.\", \"start\": 936.32, \"duration\": 3.23}, {\"text\": \"So the self is going\\nto be a parameter when\", \"start\": 939.55, \"duration\": 2.54}, {\"text\": \"you define this\\nclass that represents\", \"start\": 942.09, \"duration\": 2.79}, {\"text\": \"a particular instance\\nof the class.\", \"start\": 944.88, \"duration\": 4.95}, {\"text\": \"So we're defining\\nthis coordinate object\", \"start\": 949.83, \"duration\": 2.67}, {\"text\": \"in sort of a general way, right?\", \"start\": 952.5, \"duration\": 2.04}, {\"text\": \"We don't have a\\nspecific instance\", \"start\": 954.54, \"duration\": 2.13}, {\"text\": \"yet because we haven't\\ncreated an object yet.\", \"start\": 956.67, \"duration\": 3.18}, {\"text\": \"But this self is\\ngoing to be sort\", \"start\": 959.85, \"duration\": 2.16}, {\"text\": \"of a placeholder for\\nany sort of instance\", \"start\": 962.01, \"duration\": 2.82}, {\"text\": \"when you create the object.\", \"start\": 964.83, \"duration\": 2.98}, {\"text\": \"So in the definition\\nof the class,\", \"start\": 967.81, \"duration\": 2.51}, {\"text\": \"whenever you want to\\nrefer to attributes\", \"start\": 970.32, \"duration\": 1.95}, {\"text\": \"that belong to an instance,\\nyou have to use self dot.\", \"start\": 972.27, \"duration\": 5.26}, {\"text\": \"So this dot notation.\", \"start\": 977.53, \"duration\": 1.8}, {\"text\": \"And the dot is going to say\\nlook for a data attribute\", \"start\": 979.33, \"duration\": 6.9}, {\"text\": \"x that belongs to this class.\", \"start\": 986.23, \"duration\": 2.19}, {\"text\": \"So for methods that\\nbelong to the class,\", \"start\": 991.24, \"duration\": 2.81}, {\"text\": \"the first parameter is\\nalways going to be self.\", \"start\": 994.05, \"duration\": 3.264}, {\"text\": \"It can be named\\nanything you want,\", \"start\": 997.314, \"duration\": 1.416}, {\"text\": \"but really by convention\\nit's always named self.\", \"start\": 998.73, \"duration\": 3.06}, {\"text\": \"So try to stick to that.\", \"start\": 1001.79, \"duration\": 2.49}, {\"text\": \"And then any other\\nparameters beyond it\", \"start\": 1004.28, \"duration\": 1.89}, {\"text\": \"are going to be just\\nparameters as you\", \"start\": 1006.17, \"duration\": 1.74}, {\"text\": \"would put in a normal function.\", \"start\": 1007.91, \"duration\": 3.28}, {\"text\": \"OK.\", \"start\": 1011.19, \"duration\": 0.681}, {\"text\": \"In this particular\\ncase, we're going\", \"start\": 1011.871, \"duration\": 1.499}, {\"text\": \"to choose to initialize\\na coordinate object\", \"start\": 1013.37, \"duration\": 2.97}, {\"text\": \"by two values, one for\\nthe x and one for the y.\", \"start\": 1016.34, \"duration\": 4.47}, {\"text\": \"And inside this\\ninit method, we're\", \"start\": 1020.81, \"duration\": 2.88}, {\"text\": \"going to have two assignments.\", \"start\": 1023.69, \"duration\": 4.149}, {\"text\": \"The first one says,\\nthe x data attribute\", \"start\": 1027.839, \"duration\": 3.74}, {\"text\": \"of a coordinate object.\", \"start\": 1031.579, \"duration\": 1.411}, {\"text\": \"I'm going to assign it to\\nwhatever was passed in.\", \"start\": 1032.99, \"duration\": 4.599}, {\"text\": \"And the y data attribute\\nfor a particular object\", \"start\": 1037.589, \"duration\": 3.02}, {\"text\": \"is going to be assigned\\nwhatever y was passed in.\", \"start\": 1040.609, \"duration\": 2.911}, {\"text\": \"Questions so far about\\nhow to write this init?\", \"start\": 1050.42, \"duration\": 3.73}, {\"text\": \"Yeah, question.\", \"start\": 1054.15, \"duration\": 0.85}, {\"text\": \"AUDIENCE: [INAUDIBLE]\", \"start\": 1055.0, \"duration\": 0.97}, {\"text\": \"PROFESSOR: How do you\\nmake sure that x and y\", \"start\": 1060.597, \"duration\": 1.833}, {\"text\": \"are inits or floats?\", \"start\": 1062.43, \"duration\": 1.58}, {\"text\": \"So this is something\\nthat you could\", \"start\": 1064.01, \"duration\": 1.69}, {\"text\": \"write in the specifications,\\nso the docstring\", \"start\": 1065.7, \"duration\": 2.67}, {\"text\": \"with the triple quotes.\", \"start\": 1068.37, \"duration\": 1.2}, {\"text\": \"So whoever uses the\\nclass would then\", \"start\": 1069.57, \"duration\": 3.33}, {\"text\": \"know that if they do something\\noutside the specification,\", \"start\": 1072.9, \"duration\": 3.03}, {\"text\": \"the code might not\\nwork as expected.\", \"start\": 1075.93, \"duration\": 2.13}, {\"text\": \"Or you could put\\nin a cert statement\", \"start\": 1078.06, \"duration\": 2.28}, {\"text\": \"inside the definition\\nof the init just\", \"start\": 1080.34, \"duration\": 3.54}, {\"text\": \"to sort of force that.\", \"start\": 1083.88, \"duration\": 2.65}, {\"text\": \"Force that to be true.\", \"start\": 1086.53, \"duration\": 1.94}, {\"text\": \"Great question.\", \"start\": 1088.47, \"duration\": 0.725}, {\"text\": \"Yeah, question.\", \"start\": 1089.195, \"duration\": 0.625}, {\"text\": \"AUDIENCE: [INAUDIBLE]\", \"start\": 1089.82, \"duration\": 0.94}, {\"text\": \"PROFESSOR: Does the x,\\ndoes this self x and this x\", \"start\": 1094.52, \"duration\": 2.319}, {\"text\": \"have to be the same name.\", \"start\": 1096.839, \"duration\": 1.041}, {\"text\": \"The answer is no.\", \"start\": 1097.88, \"duration\": 1.83}, {\"text\": \"And we're going to\\nsee in class exercise\", \"start\": 1099.71, \"duration\": 2.55}, {\"text\": \"that you can have\\nit be different.\", \"start\": 1102.26, \"duration\": 1.9}, {\"text\": \"OK.\", \"start\": 1107.03, \"duration\": 1.02}, {\"text\": \"Great.\", \"start\": 1108.05, \"duration\": 0.69}, {\"text\": \"So this defines the way\\nthat we create an object.\", \"start\": 1108.74, \"duration\": 5.52}, {\"text\": \"So now we have sort\\nof a nice class.\", \"start\": 1114.26, \"duration\": 4.86}, {\"text\": \"It's very simple, but\\nwe can start actually\", \"start\": 1119.12, \"duration\": 2.37}, {\"text\": \"creating coordinate objects.\", \"start\": 1121.49, \"duration\": 2.407}, {\"text\": \"So when you create\\ncoordinate objects,\", \"start\": 1123.897, \"duration\": 1.583}, {\"text\": \"you're creating\\ninstances of the class.\", \"start\": 1125.48, \"duration\": 3.45}, {\"text\": \"So this line here, C is\\nequal to coordinate 3,4,\", \"start\": 1128.93, \"duration\": 3.51}, {\"text\": \"is going to call\\nthe init method.\", \"start\": 1132.44, \"duration\": 2.8}, {\"text\": \"It's going to call the init\\nmethod with x is equal to 3\", \"start\": 1135.24, \"duration\": 2.94}, {\"text\": \"and y is equal to 4.\", \"start\": 1138.18, \"duration\": 1.2}, {\"text\": \"I'm just going to go over here\\nand I wrote this previously,\", \"start\": 1141.94, \"duration\": 5.25}, {\"text\": \"because notice when we're\\ncreating an object here,\", \"start\": 1147.19, \"duration\": 6.79}, {\"text\": \"we're only giving\\nit two parameters.\", \"start\": 1153.98, \"duration\": 2.91}, {\"text\": \"But in the init method, we\\nhave actually three parameters,\", \"start\": 1156.89, \"duration\": 3.3}, {\"text\": \"right?\", \"start\": 1160.19, \"duration\": 0.87}, {\"text\": \"We have these three\\nparameters here,\", \"start\": 1161.06, \"duration\": 1.834}, {\"text\": \"but when we're\\ncreating an object,\", \"start\": 1162.894, \"duration\": 1.416}, {\"text\": \"we only give it two parameters.\", \"start\": 1164.31, \"duration\": 1.64}, {\"text\": \"And that's OK because\\nimplicitly, Python\", \"start\": 1165.95, \"duration\": 2.65}, {\"text\": \"is going to say self is going\\nto be this object C, so just\", \"start\": 1168.6, \"duration\": 3.23}, {\"text\": \"by default, OK?\", \"start\": 1171.83, \"duration\": 1.487}, {\"text\": \"So when you're creating\\na coordinate object,\", \"start\": 1173.317, \"duration\": 1.833}, {\"text\": \"you're passing it all the\\nvariables except for self.\", \"start\": 1175.15, \"duration\": 5.11}, {\"text\": \"So this line here is\\ngoing to call the init\", \"start\": 1184.93, \"duration\": 2.42}, {\"text\": \"and it's going to do every\\nline inside the init.\", \"start\": 1187.35, \"duration\": 2.39}, {\"text\": \"So it's going to create\\nan x data attribute for C,\", \"start\": 1189.74, \"duration\": 4.91}, {\"text\": \"a y data attribute\\nfor C, and it's\", \"start\": 1194.65, \"duration\": 2.28}, {\"text\": \"going to assign 3 and 4\\nto those respectively.\", \"start\": 1196.93, \"duration\": 4.87}, {\"text\": \"This next line here is\\norigin equals coordinate 0,\", \"start\": 1201.8, \"duration\": 3.5}, {\"text\": \"0 creates another object.\", \"start\": 1205.3, \"duration\": 3.51}, {\"text\": \"OK?\", \"start\": 1208.81, \"duration\": 1.36}, {\"text\": \"It's another coordinate\\nobject whose value for x is 0\", \"start\": 1210.17, \"duration\": 3.6}, {\"text\": \"and whose value for y is 0.\", \"start\": 1213.77, \"duration\": 2.43}, {\"text\": \"So now we have two\\ncoordinate objects.\", \"start\": 1216.2, \"duration\": 3.01}, {\"text\": \"We can access the\\ndata attributes\", \"start\": 1219.21, \"duration\": 2.33}, {\"text\": \"using this dot notation and\\nwe've seen that before, right?\", \"start\": 1221.54, \"duration\": 3.312}, {\"text\": \"When we've worked with lists\\nwe'd say something like,\", \"start\": 1224.852, \"duration\": 2.208}, {\"text\": \"L dot append, right,\\nwhen we create a list.\", \"start\": 1227.06, \"duration\": 3.07}, {\"text\": \"So the same dot notation can\\nbe used with your own objects\", \"start\": 1230.13, \"duration\": 4.7}, {\"text\": \"in order to access\\ndata attributes.\", \"start\": 1234.83, \"duration\": 2.52}, {\"text\": \"So here, this is\\ngoing to print 3\", \"start\": 1237.35, \"duration\": 2.37}, {\"text\": \"because the x value\\nfor object C is 3,\", \"start\": 1239.72, \"duration\": 7.46}, {\"text\": \"and the next line,\\nprint origin x\", \"start\": 1247.18, \"duration\": 1.92}, {\"text\": \"is going to print 0 because the\\nx value for the object origin\", \"start\": 1249.1, \"duration\": 4.05}, {\"text\": \"is 0.\", \"start\": 1253.15, \"duration\": 1.68}, {\"text\": \"OK.\", \"start\": 1254.83, \"duration\": 0.95}, {\"text\": \"So we've created a\\ncoordinate object.\", \"start\": 1255.78, \"duration\": 3.67}, {\"text\": \"We have to find the\\ninit method so we\", \"start\": 1259.45, \"duration\": 1.61}, {\"text\": \"have a way to create objects\\nwhen we use the class.\", \"start\": 1261.06, \"duration\": 4.15}, {\"text\": \"And then we can access\\nthe data attributes.\", \"start\": 1265.21, \"duration\": 3.05}, {\"text\": \"But that's kind of lame, right,\\nbecause there isn't anything\", \"start\": 1268.26, \"duration\": 3.27}, {\"text\": \"cool we can do with it.\", \"start\": 1271.53, \"duration\": 1.03}, {\"text\": \"There isn't ways to\\ninteract with this object.\", \"start\": 1272.56, \"duration\": 3.23}, {\"text\": \"So let's add some methods.\", \"start\": 1275.79, \"duration\": 1.98}, {\"text\": \"Remember methods are going to\\nbe procedural attributes that\", \"start\": 1277.77, \"duration\": 3.9}, {\"text\": \"allow us to interact\\nwith our object.\", \"start\": 1281.67, \"duration\": 3.36}, {\"text\": \"Methods are like functions\\nexcept that there's\", \"start\": 1285.03, \"duration\": 2.85}, {\"text\": \"a couple of differences\\nwhich you'll see in a moment.\", \"start\": 1287.88, \"duration\": 2.91}, {\"text\": \"And when you're\\ncalling methods, you're\", \"start\": 1290.79, \"duration\": 3.0}, {\"text\": \"using the dot operator, like\\nL dot append, for example,\", \"start\": 1293.79, \"duration\": 4.59}, {\"text\": \"for lists.\", \"start\": 1298.38, \"duration\": 0.54}, {\"text\": \"So let's go back to defining\\nour coordinate class\", \"start\": 1301.81, \"duration\": 3.84}, {\"text\": \"and let's define\\na method for it.\", \"start\": 1305.65, \"duration\": 2.59}, {\"text\": \"So so far we've defined\\nthat part there,\", \"start\": 1308.24, \"duration\": 2.67}, {\"text\": \"class coordinate and an init.\", \"start\": 1310.91, \"duration\": 1.53}, {\"text\": \"So we have that.\", \"start\": 1312.44, \"duration\": 1.35}, {\"text\": \"So in this slide we're going\\nto add this method here.\", \"start\": 1313.79, \"duration\": 4.37}, {\"text\": \"So this method here\\nis going to say\", \"start\": 1318.16, \"duration\": 1.77}, {\"text\": \"I'm going to define a\\nmethod called distance\", \"start\": 1319.93, \"duration\": 4.35}, {\"text\": \"and I'm going to pass\\nin two parameters.\", \"start\": 1324.28, \"duration\": 1.89}, {\"text\": \"Remember self, the\\nfirst parameter,\", \"start\": 1326.17, \"duration\": 2.55}, {\"text\": \"is always going to be\\nthe instance of an object\", \"start\": 1328.72, \"duration\": 2.61}, {\"text\": \"that you're going to\\nperform the operation on.\", \"start\": 1331.33, \"duration\": 3.41}, {\"text\": \"So pretty much by convention\\nit's always named self.\", \"start\": 1334.74, \"duration\": 4.89}, {\"text\": \"And then for this\\nparticular method,\", \"start\": 1342.7, \"duration\": 2.31}, {\"text\": \"I'm going to give it\\nanother parameter,\", \"start\": 1345.01, \"duration\": 1.98}, {\"text\": \"and I can name this\\nwhatever I want.\", \"start\": 1346.99, \"duration\": 2.42}, {\"text\": \"I'm naming it other.\", \"start\": 1349.41, \"duration\": 1.7}, {\"text\": \"And this is going to represent\\nthe other coordinate object\", \"start\": 1351.11, \"duration\": 3.08}, {\"text\": \"for which I want to find\\nthe distance from my self.\", \"start\": 1354.19, \"duration\": 3.952}, {\"text\": \"So here I'm going\\nto just implement\", \"start\": 1358.142, \"duration\": 1.458}, {\"text\": \"the Euclidean distance formula,\\nwhich is x1 minus x2 squared,\", \"start\": 1359.6, \"duration\": 6.72}, {\"text\": \"plus Y1 minus Y2 squared,\\nand square root of all that.\", \"start\": 1366.32, \"duration\": 4.43}, {\"text\": \"So that's what I'm\\ndoing inside here.\", \"start\": 1370.75, \"duration\": 3.62}, {\"text\": \"Self and other are\\ncoordinate objects.\", \"start\": 1374.37, \"duration\": 1.885}, {\"text\": \"Inside this method, I have\\nto refer to the x data\", \"start\": 1379.15, \"duration\": 5.79}, {\"text\": \"attributes of each\\nobject if I want\", \"start\": 1384.94, \"duration\": 1.95}, {\"text\": \"to find the difference between\\nthe 2x values from them.\", \"start\": 1386.89, \"duration\": 4.33}, {\"text\": \"So that's why I'm doing\\nself dot x here, right.\", \"start\": 1391.22, \"duration\": 3.05}, {\"text\": \"If I just did x, I would be\\naccessing just some variable\", \"start\": 1394.27, \"duration\": 2.97}, {\"text\": \"named x in a program which\\nactually isn't even defined.\", \"start\": 1397.24, \"duration\": 5.01}, {\"text\": \"So you always have to\\nrefer when as we're\", \"start\": 1402.25, \"duration\": 4.734}, {\"text\": \"thinking about\\nclasses, you always\", \"start\": 1406.984, \"duration\": 1.416}, {\"text\": \"have to refer to\\nwhose data attribute\", \"start\": 1408.4, \"duration\": 2.37}, {\"text\": \"do you want to access?\", \"start\": 1410.77, \"duration\": 2.1}, {\"text\": \"In this case, I want\\nto access the x data\", \"start\": 1412.87, \"duration\": 2.13}, {\"text\": \"attribute of my self, and I\\nwant to subtract the x data\", \"start\": 1415.0, \"duration\": 3.84}, {\"text\": \"attribute of this\\nother coordinate,\", \"start\": 1418.84, \"duration\": 2.43}, {\"text\": \"square that, same for y,\\nsquare that, and then add those\", \"start\": 1421.27, \"duration\": 4.47}, {\"text\": \"and take the square\\nroot of that.\", \"start\": 1425.74, \"duration\": 2.58}, {\"text\": \"So notice this method is pretty\\nmuch like a function, right?\", \"start\": 1428.32, \"duration\": 2.79}, {\"text\": \"You have DF, some name,\\nit takes in parameters.\", \"start\": 1431.11, \"duration\": 3.72}, {\"text\": \"It does some stuff and\\nthen it returns a value.\", \"start\": 1434.83, \"duration\": 3.09}, {\"text\": \"The only difference is the\\nfact that you have a self here\", \"start\": 1437.92, \"duration\": 3.35}, {\"text\": \"as the first thing and\\nthe fact that you always\", \"start\": 1441.27, \"duration\": 3.58}, {\"text\": \"have to be conscious about\\nwhose data attributes\", \"start\": 1444.85, \"duration\": 2.91}, {\"text\": \"you're accessing.\", \"start\": 1447.76, \"duration\": 0.75}, {\"text\": \"So you have to use the\\ndot notation in order\", \"start\": 1452.14, \"duration\": 1.94}, {\"text\": \"to decide whose data\\nattributes you want access.\", \"start\": 1454.08, \"duration\": 3.76}, {\"text\": \"So we've defined the\\nmethod here, distance.\", \"start\": 1457.84, \"duration\": 3.382}, {\"text\": \"So this is in the\\nclass definition.\", \"start\": 1461.222, \"duration\": 1.458}, {\"text\": \"Now how do we use it?\", \"start\": 1462.68, \"duration\": 2.49}, {\"text\": \"So let's assume that the\\ndefinition of distance\", \"start\": 1465.17, \"duration\": 2.95}, {\"text\": \"is up here.\", \"start\": 1468.12, \"duration\": 0.88}, {\"text\": \"I didn't include the code.\", \"start\": 1469.0, \"duration\": 3.32}, {\"text\": \"But really all you need\\nto know is what it takes.\", \"start\": 1472.32, \"duration\": 2.24}, {\"text\": \"It takes a self and an other.\", \"start\": 1474.56, \"duration\": 2.5}, {\"text\": \"So when you want\\nto use this method\", \"start\": 1477.06, \"duration\": 2.43}, {\"text\": \"to figure out a distance\\nbetween two coordinate objects,\", \"start\": 1479.49, \"duration\": 2.64}, {\"text\": \"this is how you do it.\", \"start\": 1482.13, \"duration\": 1.36}, {\"text\": \"So the first line, I create\\none coordinate object.\", \"start\": 1483.49, \"duration\": 3.62}, {\"text\": \"Second line, I create\\nanother coordinate object.\", \"start\": 1487.11, \"duration\": 3.21}, {\"text\": \"First one is named C, the\\nsecond one is named 0.\", \"start\": 1490.32, \"duration\": 2.31}, {\"text\": \"These are two separate objects.\", \"start\": 1492.63, \"duration\": 3.26}, {\"text\": \"And I'm going to\\nfind the distance.\", \"start\": 1495.89, \"duration\": 4.52}, {\"text\": \"And I want to first\\ncall it on one object,\", \"start\": 1500.41, \"duration\": 2.99}, {\"text\": \"so I'm going to say C dot,\\nso I'm using the dot notation\", \"start\": 1503.4, \"duration\": 3.94}, {\"text\": \"to call the method\\ndistance on object C.\", \"start\": 1507.34, \"duration\": 7.4}, {\"text\": \"So Python says this object\\nC is of type coordinate.\", \"start\": 1514.74, \"duration\": 3.384}, {\"text\": \"It's going to look\\nup at the class\", \"start\": 1518.124, \"duration\": 1.416}, {\"text\": \"coordinate that you defined.\", \"start\": 1519.54, \"duration\": 1.23}, {\"text\": \"It's going to find this\\nmethod called distance\", \"start\": 1520.77, \"duration\": 2.58}, {\"text\": \"and then it's going to say\\nwhat parameters does it take?\", \"start\": 1523.35, \"duration\": 2.94}, {\"text\": \"So it takes another parameter,\\nright, for the other\", \"start\": 1526.29, \"duration\": 3.33}, {\"text\": \"and then, in the\\nparentheses, I just\", \"start\": 1529.62, \"duration\": 2.07}, {\"text\": \"have to give it this\\nother perimeter.\", \"start\": 1531.69, \"duration\": 3.9}, {\"text\": \"An easier way to\\nsee what happens\", \"start\": 1535.59, \"duration\": 2.28}, {\"text\": \"is by looking at what this\\nline here is equivalent to.\", \"start\": 1537.87, \"duration\": 5.04}, {\"text\": \"So the third line\\nhere prints C dot\", \"start\": 1546.0, \"duration\": 2.56}, {\"text\": \"distance 0 is equivalent\\nto this one on the right.\", \"start\": 1548.56, \"duration\": 3.099}, {\"text\": \"And this one on the\\nright essentially\", \"start\": 1551.659, \"duration\": 1.541}, {\"text\": \"says, what's the\\nname of the class,\", \"start\": 1553.2, \"duration\": 4.42}, {\"text\": \"dot, dot notation, what's\\nthe method you want to call,\", \"start\": 1557.62, \"duration\": 4.06}, {\"text\": \"and then in\\nparentheses you give it\", \"start\": 1561.68, \"duration\": 2.22}, {\"text\": \"all of the variables\\nincluding self.\", \"start\": 1563.9, \"duration\": 2.43}, {\"text\": \"OK.\", \"start\": 1566.33, \"duration\": 0.6}, {\"text\": \"So in this case you're\\nexplicitly telling Python\", \"start\": 1566.93, \"duration\": 2.82}, {\"text\": \"that self is C and other is 0.\", \"start\": 1569.75, \"duration\": 6.28}, {\"text\": \"So this is a little bit easier\\nto understand, like that.\", \"start\": 1576.03, \"duration\": 6.05}, {\"text\": \"But it's a little cumbersome\\nbecause you always\", \"start\": 1582.08, \"duration\": 3.24}, {\"text\": \"have to write coordinate dot,\\ncoordinate dot, coordinate dot,\", \"start\": 1585.32, \"duration\": 2.58}, {\"text\": \"for every data\\nattribute you might want\", \"start\": 1587.9, \"duration\": 1.625}, {\"text\": \"to access, for every\\nprocedural attribute you\", \"start\": 1589.525, \"duration\": 2.105}, {\"text\": \"might want to access.\", \"start\": 1591.63, \"duration\": 2.48}, {\"text\": \"So by convention,\\nit's a lot easier\", \"start\": 1594.11, \"duration\": 2.85}, {\"text\": \"to do the one on the left.\", \"start\": 1596.96, \"duration\": 3.05}, {\"text\": \"And as I mentioned,\\nPython implicitly says,\", \"start\": 1600.01, \"duration\": 2.85}, {\"text\": \"if you're doing the\\none on the left,\", \"start\": 1602.86, \"duration\": 2.63}, {\"text\": \"you can call this method\\non a particular object\", \"start\": 1605.49, \"duration\": 2.41}, {\"text\": \"and it's going to look\\nup the type of the object\", \"start\": 1607.9, \"duration\": 2.0}, {\"text\": \"and it's going to essentially\\nconvert this on the left\", \"start\": 1609.9, \"duration\": 3.0}, {\"text\": \"to the one on the right.\", \"start\": 1612.9, \"duration\": 1.941}, {\"text\": \"And this is what you've\\nbeen using so far.\", \"start\": 1614.841, \"duration\": 1.749}, {\"text\": \"So when you create a list,\\nyou say L is equal to 1, 2,\", \"start\": 1616.59, \"duration\": 3.03}, {\"text\": \"and then you say L.append,\\nyou know, 3 or whatever.\", \"start\": 1619.62, \"duration\": 5.54}, {\"text\": \"So we've been using this\\nnotation on the left\", \"start\": 1625.16, \"duration\": 4.52}, {\"text\": \"pretty much from the\\nbeginning of class.\", \"start\": 1629.68, \"duration\": 4.56}, {\"text\": \"So we have a\\ncoordinate class, we\", \"start\": 1634.24, \"duration\": 3.04}, {\"text\": \"can create a\\ncoordinate object, we\", \"start\": 1637.28, \"duration\": 1.83}, {\"text\": \"can get the distance\\nbetween two objects.\", \"start\": 1639.11, \"duration\": 3.006}, {\"text\": \"As you're using\\nthe class, if you\", \"start\": 1642.116, \"duration\": 1.374}, {\"text\": \"wanted to use this\\ncoordinate class,\", \"start\": 1643.49, \"duration\": 2.37}, {\"text\": \"and you were maybe debugging\\nat some point, a lot of you\", \"start\": 1645.86, \"duration\": 3.72}, {\"text\": \"probably use print as a\\ndebug statement, right?\", \"start\": 1649.58, \"duration\": 2.58}, {\"text\": \"And maybe you want to print the\\nvalue of a coordinate object.\", \"start\": 1652.16, \"duration\": 5.639}, {\"text\": \"So if you create a\\ncoordinate object,\", \"start\": 1657.799, \"duration\": 1.541}, {\"text\": \"C is equal to\\ncoordinate 3, 4, right?\", \"start\": 1659.34, \"duration\": 2.28}, {\"text\": \"That's what we've done so far.\", \"start\": 1661.62, \"duration\": 1.78}, {\"text\": \"If you print C, you\\nget this funny message.\", \"start\": 1663.4, \"duration\": 4.7}, {\"text\": \"Very uninformative, right?\", \"start\": 1668.1, \"duration\": 1.47}, {\"text\": \"It basically says, well,\\nC is an object of type\", \"start\": 1669.57, \"duration\": 4.23}, {\"text\": \"coordinate at this memory\\nlocation in the computer.\", \"start\": 1673.8, \"duration\": 6.489}, {\"text\": \"Which is not what you\\nwanted at all, right?\", \"start\": 1680.289, \"duration\": 1.791}, {\"text\": \"Maybe you wanted to know what\\nthe values for x and y were.\", \"start\": 1682.08, \"duration\": 2.91}, {\"text\": \"That would be a lot\\nmore informative.\", \"start\": 1684.99, \"duration\": 3.2}, {\"text\": \"So by default, when you\\ncreate your own type, when\", \"start\": 1688.19, \"duration\": 6.07}, {\"text\": \"you print the\\nobject of that type,\", \"start\": 1694.26, \"duration\": 1.56}, {\"text\": \"Python tells you this\\nsort of information\", \"start\": 1695.82, \"duration\": 1.8}, {\"text\": \"which is not what you want.\", \"start\": 1697.62, \"duration\": 2.05}, {\"text\": \"So what you need\\nto do is you need\", \"start\": 1699.67, \"duration\": 1.52}, {\"text\": \"to define your own\\nmethod that tells\", \"start\": 1701.19, \"duration\": 3.0}, {\"text\": \"Python what to do\\nwhen you call print\", \"start\": 1704.19, \"duration\": 3.27}, {\"text\": \"on an object of this type.\", \"start\": 1707.46, \"duration\": 3.54}, {\"text\": \"So this is going to be\\na special method, just\", \"start\": 1711.0, \"duration\": 3.21}, {\"text\": \"like init is, because\\nit starts and ends\", \"start\": 1714.21, \"duration\": 2.55}, {\"text\": \"with double underscores.\", \"start\": 1716.76, \"duration\": 2.89}, {\"text\": \"And the name of the method is\\nunderscore, underscore, str,\", \"start\": 1719.65, \"duration\": 3.05}, {\"text\": \"underscore, underscore.\", \"start\": 1722.7, \"duration\": 1.68}, {\"text\": \"And if you define this method in\\nyour class, that tells Python,\", \"start\": 1724.38, \"duration\": 4.17}, {\"text\": \"hey, when you see a\\nprint statement that's\", \"start\": 1728.55, \"duration\": 2.46}, {\"text\": \"on an object of type\\ncoordinate, call this method,\", \"start\": 1731.01, \"duration\": 3.24}, {\"text\": \"look what it does, and do\\neverything that's inside it.\", \"start\": 1734.25, \"duration\": 4.5}, {\"text\": \"And you can choose to make\\nit do whatever you want\", \"start\": 1738.75, \"duration\": 3.69}, {\"text\": \"inside your definition of str.\", \"start\": 1742.44, \"duration\": 3.48}, {\"text\": \"In this case, let's say when\\nwe print a coordinate object,\", \"start\": 1745.92, \"duration\": 2.7}, {\"text\": \"we're going to print its\\nx and y values surrounded\", \"start\": 1748.62, \"duration\": 2.67}, {\"text\": \"by angle brackets.\", \"start\": 1751.29, \"duration\": 1.83}, {\"text\": \"That seems reasonable, right?\", \"start\": 1753.12, \"duration\": 1.83}, {\"text\": \"So then from now on when you\\nprint coordinate objects,\", \"start\": 1754.95, \"duration\": 5.29}, {\"text\": \"you're going to see\\nthings like this, which\", \"start\": 1760.24, \"duration\": 1.85}, {\"text\": \"is a lot more informative.\", \"start\": 1762.09, \"duration\": 3.57}, {\"text\": \"So how do we define this?\", \"start\": 1765.66, \"duration\": 1.97}, {\"text\": \"So so far we've defined\\nall that and the last part\", \"start\": 1767.63, \"duration\": 4.98}, {\"text\": \"is going to be new.\", \"start\": 1772.61, \"duration\": 2.42}, {\"text\": \"So we define the init\\nand the distance,\", \"start\": 1775.03, \"duration\": 2.12}, {\"text\": \"and let's define this str.\", \"start\": 1777.15, \"duration\": 1.185}, {\"text\": \"So underscore, underscore,\\nstr, underscore, underscore, is\", \"start\": 1782.17, \"duration\": 3.66}, {\"text\": \"a method.\", \"start\": 1785.83, \"duration\": 1.94}, {\"text\": \"It's only going to take self\\nbecause you're just calling\", \"start\": 1787.77, \"duration\": 3.29}, {\"text\": \"print on the object itself.\", \"start\": 1791.06, \"duration\": 2.97}, {\"text\": \"There's no other\\nparameters to it.\", \"start\": 1794.03, \"duration\": 3.52}, {\"text\": \"Str has to return a string,\\nand in this particular case,\", \"start\": 1797.55, \"duration\": 5.55}, {\"text\": \"we're going to return\\nthe string that's\", \"start\": 1803.1, \"duration\": 2.28}, {\"text\": \"the angle brackets concatenated\\nwith the x value of the object,\", \"start\": 1805.38, \"duration\": 4.66}, {\"text\": \"self.x, concatenated\\nwith a comma,\", \"start\": 1810.04, \"duration\": 3.32}, {\"text\": \"concatenated with the y value\\nof this particular instance\", \"start\": 1813.36, \"duration\": 3.72}, {\"text\": \"of an object, self.y,\\nand then concatenated\", \"start\": 1817.08, \"duration\": 2.885}, {\"text\": \"with the angle brackets.\", \"start\": 1819.965, \"duration\": 1.0}, {\"text\": \"So now any time you have\\nprint on an object of type\", \"start\": 1823.72, \"duration\": 2.79}, {\"text\": \"coordinate, you're going to\\ncall this special method str,\", \"start\": 1826.51, \"duration\": 3.15}, {\"text\": \"if it's implemented\\nin your code.\", \"start\": 1829.66, \"duration\": 2.82}, {\"text\": \"Any questions?\", \"start\": 1832.48, \"duration\": 0.75}, {\"text\": \"OK.\", \"start\": 1837.57, \"duration\": 0.5}, {\"text\": \"So let's try to wrap our\\nhead around types and classes\", \"start\": 1841.46, \"duration\": 4.775}, {\"text\": \"because we've seen a lot today.\", \"start\": 1846.235, \"duration\": 1.291}, {\"text\": \"Let's create a\\ncoordinate object,\", \"start\": 1850.78, \"duration\": 3.46}, {\"text\": \"assign it 3, 4, as we have been,\\nand assign it to variable C.\", \"start\": 1854.24, \"duration\": 6.05}, {\"text\": \"We've implemented the str\\nmethod, so when we print C,\", \"start\": 1860.29, \"duration\": 4.47}, {\"text\": \"it's going to print out this\\nnice three comma for our angle\", \"start\": 1864.76, \"duration\": 2.67}, {\"text\": \"brackets.\", \"start\": 1867.43, \"duration\": 0.5}, {\"text\": \"If we print the type\\nof C, this is actually\", \"start\": 1871.14, \"duration\": 1.98}, {\"text\": \"going to give us class main\\ncoordinate, which tells us\", \"start\": 1873.12, \"duration\": 4.43}, {\"text\": \"that C is going to\\nbe an object that\", \"start\": 1877.55, \"duration\": 10.22}, {\"text\": \"is of type class coordinate.\", \"start\": 1887.77, \"duration\": 2.794}, {\"text\": \"If we look at\\ncoordinate as a class,\", \"start\": 1893.37, \"duration\": 4.13}, {\"text\": \"if we print what coordinate is,\\ncoordinate is a class, right?\", \"start\": 1897.5, \"duration\": 2.82}, {\"text\": \"So this is what Python tells\\nus, if we print coordinate,\", \"start\": 1900.32, \"duration\": 2.52}, {\"text\": \"it's a class named coordinate.\", \"start\": 1902.84, \"duration\": 3.89}, {\"text\": \"And if we print the\\ntype of a coordinate,\", \"start\": 1906.73, \"duration\": 1.75}, {\"text\": \"well that's just\\ngoing to be a type.\", \"start\": 1908.48, \"duration\": 1.92}, {\"text\": \"So class is going to be a type.\", \"start\": 1910.4, \"duration\": 1.32}, {\"text\": \"So you're defining\\nthe type of an object.\", \"start\": 1911.72, \"duration\": 1.708}, {\"text\": \"If you'd like to figure out\\nwhether a particular object is\", \"start\": 1916.77, \"duration\": 5.18}, {\"text\": \"an instance of a\\nparticular class,\", \"start\": 1921.95, \"duration\": 1.85}, {\"text\": \"you use this special\\nfunction called is instance.\", \"start\": 1923.8, \"duration\": 3.28}, {\"text\": \"So if you print is instance\\nC comma coordinate,\", \"start\": 1927.08, \"duration\": 3.24}, {\"text\": \"this is going to print true\\nbecause C is an object that\", \"start\": 1930.32, \"duration\": 3.39}, {\"text\": \"is of type coordinate.\", \"start\": 1933.71, \"duration\": 1.861}, {\"text\": \"Couple more words on\\nthese special operators.\", \"start\": 1943.43, \"duration\": 2.68}, {\"text\": \"So these special\\noperators allow you\", \"start\": 1946.11, \"duration\": 1.61}, {\"text\": \"to customize your classes which\\ncan add some cool functionality\", \"start\": 1947.72, \"duration\": 4.05}, {\"text\": \"to them.\", \"start\": 1951.77, \"duration\": 1.64}, {\"text\": \"So these special\\noperators are going\", \"start\": 1953.41, \"duration\": 3.39}, {\"text\": \"to be things like\\naddition, subtraction,\", \"start\": 1956.8, \"duration\": 2.91}, {\"text\": \"using the equal equal sign,\\ngreater than, less than,\", \"start\": 1959.71, \"duration\": 2.43}, {\"text\": \"length and so on and so on.\", \"start\": 1962.14, \"duration\": 2.55}, {\"text\": \"So just like str,\\nif you implement\", \"start\": 1964.69, \"duration\": 3.45}, {\"text\": \"any of these in your classes,\\nthis is going to tell Python.\", \"start\": 1968.14, \"duration\": 4.26}, {\"text\": \"So for example, if we've\\nimplemented this underscore,\", \"start\": 1972.4, \"duration\": 3.91}, {\"text\": \"underscore, add, underscore,\\nunderscore in our class,\", \"start\": 1976.31, \"duration\": 4.28}, {\"text\": \"this is going to\\ntell Python when\", \"start\": 1980.59, \"duration\": 1.38}, {\"text\": \"you use this plus operator\\nbetween two objects of type\", \"start\": 1981.97, \"duration\": 2.73}, {\"text\": \"coordinate to call this method.\", \"start\": 1984.7, \"duration\": 4.29}, {\"text\": \"If you have not\\nimplemented this method\", \"start\": 1988.99, \"duration\": 1.86}, {\"text\": \"and you try to add two\\nobjects of type coordinate,\", \"start\": 1990.85, \"duration\": 2.22}, {\"text\": \"you're going to get an error\\nbecause Python doesn't actually\", \"start\": 1993.07, \"duration\": 2.04}, {\"text\": \"know right off\\nthe bat how to add\", \"start\": 1995.11, \"duration\": 1.5}, {\"text\": \"two coordinate objects, right?\", \"start\": 1996.61, \"duration\": 1.65}, {\"text\": \"You have to tell\\nit how to do that.\", \"start\": 1998.26, \"duration\": 2.194}, {\"text\": \"And you tell it how to\\ndo that by implementing\", \"start\": 2000.454, \"duration\": 1.916}, {\"text\": \"this special method.\", \"start\": 2002.37, \"duration\": 3.99}, {\"text\": \"Same with subtract.\", \"start\": 2006.36, \"duration\": 0.99}, {\"text\": \"Same with equals.\", \"start\": 2007.35, \"duration\": 1.2}, {\"text\": \"So if you want to figure out\\nwhether two objects are equal.\", \"start\": 2008.55, \"duration\": 3.19}, {\"text\": \"And when you implement these\\nmethods in your own class,\", \"start\": 2011.74, \"duration\": 3.44}, {\"text\": \"you can decide exactly\\nwhat you want to do.\", \"start\": 2015.18, \"duration\": 4.024}, {\"text\": \"So what happens when you\\nadd two coordinate objects?\", \"start\": 2019.204, \"duration\": 2.166}, {\"text\": \"Do you just add the x values,\\ndo you just add the y values,\", \"start\": 2021.37, \"duration\": 2.479}, {\"text\": \"do you get them both\\ntogether, do you\", \"start\": 2023.849, \"duration\": 1.541}, {\"text\": \"do whatever you'd like to do.\", \"start\": 2025.39, \"duration\": 2.82}, {\"text\": \"And then you document\\nwhat you've decided.\", \"start\": 2028.21, \"duration\": 3.19}, {\"text\": \"So let's create a\\nfraction object.\", \"start\": 2031.4, \"duration\": 2.856}, {\"text\": \"So we've looked\\nat coordinate, we\", \"start\": 2034.256, \"duration\": 1.374}, {\"text\": \"saw sort of a higher\\nlevel car object.\", \"start\": 2035.63, \"duration\": 2.77}, {\"text\": \"Let's look at a fraction object.\", \"start\": 2038.4, \"duration\": 3.4}, {\"text\": \"Fraction object\\nis going to be, is\", \"start\": 2041.8, \"duration\": 3.0}, {\"text\": \"going represent a number that's\\ngoing to be a numerator slash\", \"start\": 2044.8, \"duration\": 4.359}, {\"text\": \"denominator.\", \"start\": 2049.159, \"duration\": 2.241}, {\"text\": \"OK.\", \"start\": 2051.4, \"duration\": 0.5}, {\"text\": \"So that's going to\\nbe a fraction object.\", \"start\": 2051.9, \"duration\": 2.23}, {\"text\": \"So the way I've decided to\\ninternally represent a fraction\", \"start\": 2054.13, \"duration\": 3.68}, {\"text\": \"object is with two numbers.\", \"start\": 2057.81, \"duration\": 3.0}, {\"text\": \"And I've decided that I\\nwill not let them be floats.\", \"start\": 2060.81, \"duration\": 3.21}, {\"text\": \"They have to be integers,\\nhence the assert over here.\", \"start\": 2064.02, \"duration\": 5.69}, {\"text\": \"So inside the init,\\nI've decided I'm\", \"start\": 2069.71, \"duration\": 2.04}, {\"text\": \"going to represent my\\nfracture with two numbers, one\", \"start\": 2071.75, \"duration\": 5.969}, {\"text\": \"for the numerator and\\none for the denominator.\", \"start\": 2077.719, \"duration\": 4.161}, {\"text\": \"So when I create\\na fraction object,\", \"start\": 2081.88, \"duration\": 1.58}, {\"text\": \"I'm going to pass in a\\nnumerator and a denominator.\", \"start\": 2083.46, \"duration\": 4.59}, {\"text\": \"And a particular\\ninstance is going\", \"start\": 2088.05, \"duration\": 3.0}, {\"text\": \"to have self dot\\nnumerator and self dot\", \"start\": 2091.05, \"duration\": 2.46}, {\"text\": \"denominator as its\\ndata attributes\", \"start\": 2093.51, \"duration\": 2.27}, {\"text\": \"and I'm assigning those to be\\nwhatever's passed into my init.\", \"start\": 2095.78, \"duration\": 4.215}, {\"text\": \"Since I plan on debugging this\\ncode maybe possibly sometime\", \"start\": 2103.25, \"duration\": 4.17}, {\"text\": \"in the future, I'm also\\nincluding an str method\", \"start\": 2107.42, \"duration\": 3.48}, {\"text\": \"and the str method is going\\nto print a nice looking string\", \"start\": 2110.9, \"duration\": 9.45}, {\"text\": \"that's going to represent\\nthe numerator, and then\", \"start\": 2120.35, \"duration\": 2.4}, {\"text\": \"a slash, and then\\nthe denominator.\", \"start\": 2122.75, \"duration\": 3.816}, {\"text\": \"And then I've also implemented\\nsome other special methods.\", \"start\": 2130.3, \"duration\": 3.35}, {\"text\": \"How do I add two fractions?\", \"start\": 2133.65, \"duration\": 1.92}, {\"text\": \"How do I subtract two fractions?\", \"start\": 2135.57, \"duration\": 2.61}, {\"text\": \"And how do I convert\\na fraction to a float?\", \"start\": 2138.18, \"duration\": 4.23}, {\"text\": \"The add and subtract\\nare almost the same,\", \"start\": 2142.41, \"duration\": 1.71}, {\"text\": \"so let's look at the\\nadd for the moment.\", \"start\": 2144.12, \"duration\": 4.07}, {\"text\": \"How do we add two fractions?\", \"start\": 2148.19, \"duration\": 1.26}, {\"text\": \"We're going to take self, which\\nis the instance of an object\", \"start\": 2152.52, \"duration\": 6.89}, {\"text\": \"that I want to do\\nthe add operation on,\", \"start\": 2159.41, \"duration\": 2.8}, {\"text\": \"and we're going to\\ntake other, which\", \"start\": 2162.21, \"duration\": 1.5}, {\"text\": \"is the other\\ninstance of an object\", \"start\": 2163.71, \"duration\": 2.15}, {\"text\": \"that I want to do the\\noperation on, so the addition,\", \"start\": 2165.86, \"duration\": 3.27}, {\"text\": \"and I'm going to\\nfigure out the new top.\", \"start\": 2169.13, \"duration\": 2.22}, {\"text\": \"So the new top of the\\nresulting fraction.\", \"start\": 2171.35, \"duration\": 3.81}, {\"text\": \"So it's my numerator multiplied\\nby the other denominator\", \"start\": 2175.16, \"duration\": 4.95}, {\"text\": \"plus my denominator multiplied\\nby the other numerator\", \"start\": 2180.11, \"duration\": 3.9}, {\"text\": \"and then divided by the\\nmultiplication of the two\", \"start\": 2184.01, \"duration\": 2.4}, {\"text\": \"denominators.\", \"start\": 2186.41, \"duration\": 2.4}, {\"text\": \"So the top is going to be that,\\nthe bottom is going to be that.\", \"start\": 2188.81, \"duration\": 3.44}, {\"text\": \"Notice that we're\\nusing self dot, right?\", \"start\": 2192.25, \"duration\": 2.7}, {\"text\": \"Once again, we're\\ntrying to access\", \"start\": 2194.95, \"duration\": 1.53}, {\"text\": \"the data attributes of\\neach different instance,\", \"start\": 2196.48, \"duration\": 2.95}, {\"text\": \"right, of myself and the other\\nobject that I'm working with.\", \"start\": 2199.43, \"duration\": 3.33}, {\"text\": \"So that's why I have\\nto use self dot here.\", \"start\": 2202.76, \"duration\": 3.9}, {\"text\": \"Once I figure out the top and\\nthe bottom of the addition,\", \"start\": 2206.66, \"duration\": 4.79}, {\"text\": \"I'm going to return,\\nand here notice I'm\", \"start\": 2211.45, \"duration\": 3.68}, {\"text\": \"returning a fraction object.\", \"start\": 2215.13, \"duration\": 3.06}, {\"text\": \"It's not a number, it's not\\na float, it's not an integer.\", \"start\": 2218.19, \"duration\": 2.49}, {\"text\": \"It's a new object that is of\\nthe exact same type as the class\", \"start\": 2220.68, \"duration\": 3.21}, {\"text\": \"that I'm implementing.\", \"start\": 2223.89, \"duration\": 3.25}, {\"text\": \"So as it's the same\\ntype of object,\", \"start\": 2227.14, \"duration\": 3.27}, {\"text\": \"then on the return\\nvalue I can do\", \"start\": 2230.41, \"duration\": 1.894}, {\"text\": \"all of the exact same\\noperations that I can do\", \"start\": 2232.304, \"duration\": 1.916}, {\"text\": \"on a regular fraction object.\", \"start\": 2234.22, \"duration\": 3.74}, {\"text\": \"Sub is going to be the same.\", \"start\": 2237.96, \"duration\": 1.627}, {\"text\": \"I'm returning a fraction object.\", \"start\": 2239.587, \"duration\": 1.333}, {\"text\": \"Float is just going to\\ndo the division for me,\", \"start\": 2244.25, \"duration\": 6.08}, {\"text\": \"so it's going to\\ntake the numerator\", \"start\": 2250.33, \"duration\": 1.53}, {\"text\": \"and then divide it\\nby the denominator,\", \"start\": 2251.86, \"duration\": 2.49}, {\"text\": \"just divide the numbers.\", \"start\": 2254.35, \"duration\": 2.78}, {\"text\": \"And then I'm defining here\\nmy own method called inverse.\", \"start\": 2257.13, \"duration\": 5.66}, {\"text\": \"And this is just going to take\\nthe inverse of the instance I'm\", \"start\": 2262.79, \"duration\": 2.79}, {\"text\": \"calling this method on.\", \"start\": 2265.58, \"duration\": 1.68}, {\"text\": \"And so it's going to also return\\na new fraction object that just\", \"start\": 2267.26, \"duration\": 4.56}, {\"text\": \"has the denominator\\nas the top part\", \"start\": 2271.82, \"duration\": 2.01}, {\"text\": \"and the numerator\\nas the bottom part.\", \"start\": 2273.83, \"duration\": 1.701}, {\"text\": \"So then we have some code here.\", \"start\": 2278.9, \"duration\": 1.38}, {\"text\": \"So that's how I implement\\nmy fraction object.\", \"start\": 2280.28, \"duration\": 4.69}, {\"text\": \"So now let's use it and\\nsee what it gives us.\", \"start\": 2284.97, \"duration\": 3.07}, {\"text\": \"A is equal to a fraction 1, 4.\", \"start\": 2288.04, \"duration\": 1.25}, {\"text\": \"This is going to\\nbe 1 over 4 for a.\", \"start\": 2300.94, \"duration\": 7.93}, {\"text\": \"And b is going to\\nbe 3 over four.\", \"start\": 2308.87, \"duration\": 2.73}, {\"text\": \"When I do C, notice I'm using\\nthe plus operator between two\", \"start\": 2315.24, \"duration\": 6.16}, {\"text\": \"fraction objects, right?\", \"start\": 2321.4, \"duration\": 1.53}, {\"text\": \"A and b are fraction\\nobjects so Python's\", \"start\": 2322.93, \"duration\": 2.25}, {\"text\": \"going to say, OK, is there an\\nunderscore, underscore, add,\", \"start\": 2325.18, \"duration\": 3.579}, {\"text\": \"underscore, underscore,\\nmethod implemented?\", \"start\": 2328.759, \"duration\": 1.791}, {\"text\": \"It is and it's just going to\\ndo whatever's inside here.\", \"start\": 2330.55, \"duration\": 4.18}, {\"text\": \"So it's going to say self\\ndot numerator plus other dot\", \"start\": 2334.73, \"duration\": 2.25}, {\"text\": \"denominator.\", \"start\": 2336.98, \"duration\": 0.982}, {\"text\": \"It's going to calculate\\nthe top and the bottom.\", \"start\": 2337.962, \"duration\": 1.958}, {\"text\": \"It's going to turn a\\nnew fraction object.\", \"start\": 2339.92, \"duration\": 1.736}, {\"text\": \"So this is going to be 4 plus 12\\ndivided by 16, and 16 over 16.\", \"start\": 2345.47, \"duration\": 21.63}, {\"text\": \"So C as a fraction\\nobject is going\", \"start\": 2367.1, \"duration\": 2.7}, {\"text\": \"to be 16 for the numerator\\nand 16 for the denominator\", \"start\": 2369.8, \"duration\": 5.46}, {\"text\": \"because it's a fraction object.\", \"start\": 2375.26, \"duration\": 2.798}, {\"text\": \"If I print C, it should\\nprint 16 over 16,\", \"start\": 2383.89, \"duration\": 2.4}, {\"text\": \"so we can even run it,\\nso print 16 over 16.\", \"start\": 2386.29, \"duration\": 4.47}, {\"text\": \"If I print floats C, so this\\nspecial method float here\", \"start\": 2390.76, \"duration\": 3.81}, {\"text\": \"is going to say, is there a\\nmethod that converts a fraction\", \"start\": 2394.57, \"duration\": 4.35}, {\"text\": \"to a float and there is.\", \"start\": 2398.92, \"duration\": 1.17}, {\"text\": \"It's this one\\nimplemented right here.\", \"start\": 2400.09, \"duration\": 2.139}, {\"text\": \"So it's just going to divide\\nthe two numbers, top and bottom,\", \"start\": 2402.229, \"duration\": 2.541}, {\"text\": \"which gives me 1.\", \"start\": 2404.77, \"duration\": 2.25}, {\"text\": \"So it's this one here and here.\", \"start\": 2407.02, \"duration\": 3.7}, {\"text\": \"Notice I'm doing the\\nexact same method call,\", \"start\": 2410.72, \"duration\": 2.66}, {\"text\": \"except I'm doing it\\nthe other way where\", \"start\": 2413.38, \"duration\": 1.89}, {\"text\": \"you type in the name of the\\nclass, name of the method,\", \"start\": 2415.27, \"duration\": 5.34}, {\"text\": \"and then what you're\\ncalling it on,\", \"start\": 2420.61, \"duration\": 1.74}, {\"text\": \"and this gives the exact\\nsame value here, 1.0.\", \"start\": 2422.35, \"duration\": 5.08}, {\"text\": \"And then here I'm calling\\nthe method inverse\", \"start\": 2427.43, \"duration\": 3.21}, {\"text\": \"on object B which is going to\\ninvert 3 over 4 to be 4 over 3.\", \"start\": 2430.64, \"duration\": 6.21}, {\"text\": \"And then I'm converting\\nit to a float\", \"start\": 2436.85, \"duration\": 2.19}, {\"text\": \"and then I'm printing the value.\", \"start\": 2439.04, \"duration\": 1.38}, {\"text\": \"So it gives me 1.33.\", \"start\": 2440.42, \"duration\": 2.93}, {\"text\": \"So take a look at this\\ncode in more detail\", \"start\": 2443.35, \"duration\": 7.47}, {\"text\": \"and see if you can trace through\\nall of those different things\", \"start\": 2450.82, \"duration\": 3.24}, {\"text\": \"and see if you can also write\\nyour own new fraction objects.\", \"start\": 2454.06, \"duration\": 3.5}, {\"text\": \"OK.\", \"start\": 2457.56, \"duration\": 0.7}, {\"text\": \"So last slide.\", \"start\": 2458.26, \"duration\": 2.1}, {\"text\": \"Power of object\\noriented programming\", \"start\": 2460.36, \"duration\": 2.37}, {\"text\": \"is that you can bundle\\ntogether objects that\", \"start\": 2462.73, \"duration\": 2.01}, {\"text\": \"are of the exact same type.\", \"start\": 2464.74, \"duration\": 1.5}, {\"text\": \"And all of these\\nobjects are going\", \"start\": 2466.24, \"duration\": 1.44}, {\"text\": \"to have the same\\ndata representation\", \"start\": 2467.68, \"duration\": 2.04}, {\"text\": \"and the same methods\\nthat you can do on them.\", \"start\": 2469.72, \"duration\": 3.31}, {\"text\": \"And ultimately, you're\\ngoing to be building\", \"start\": 2473.03, \"duration\": 2.7}, {\"text\": \"these layers of abstraction.\", \"start\": 2475.73, \"duration\": 1.51}, {\"text\": \"So you're going to be building\\non a basic object type\", \"start\": 2477.24, \"duration\": 2.93}, {\"text\": \"in Python, you're going to have\\ninteger objects, float objects.\", \"start\": 2480.17, \"duration\": 6.99}, {\"text\": \"On top of those, you can\\ncreate lists, dictionaries.\", \"start\": 2487.16, \"duration\": 2.946}, {\"text\": \"And on top of\\nthose, you can even\", \"start\": 2490.106, \"duration\": 1.374}, {\"text\": \"create your own object types as\\nwe saw in this lecture today.\", \"start\": 2491.48, \"duration\": 5.6}]"